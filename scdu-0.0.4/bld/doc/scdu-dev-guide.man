.\"t
.\" Automatically generated by Pandoc 1.17.2
.\"
.TH "" "" "" "" ""
.hy
.PP
% SCDU Developer Guide
.PD 0
.P
.PD
% RVJ Callanan
.PD 0
.P
.PD
% 2017\-09\-05
.SH ABOUT
.SH Terms of Use
.PP
Copyright (C) 2015\-2017 RVJ Callanan
.PP
SCDU is free software: you can redistribute it and/or modify
.PD 0
.P
.PD
it under the terms of the GNU General Public License as published by
.PD 0
.P
.PD
the Free Software Foundation, either version 3 of the License, or
.PD 0
.P
.PD
(at your option) any later version.
.PP
SCDU is distributed in the hope that it will be useful,
.PD 0
.P
.PD
but WITHOUT ANY WARRANTY; without even the implied warranty of
.PD 0
.P
.PD
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
See the
.PD 0
.P
.PD
GNU General Public License for more details.
.PP
You should have received a copy of the GNU General Public License
.PD 0
.P
.PD
along with SCDU.
If not, see <http://www.gnu.org/licenses/>.
.SH Contributors
.PP
The SCDU Project recognises the contributions of the following
.PD 0
.P
.PD
individuals in the key areas of design, management, coding,
.PD 0
.P
.PD
testing, documentation and support:
.IP \[bu] 2
Shane Callanan, Carlow Institute of Technology
.IP \[bu] 2
Dennis Callanan, Maynooth University
.IP \[bu] 2
David Callanan, Gaelcholaiste Ceatharlach
.PP
Acknowledgements================
.PP
The SCDU Project acknowledges the following organisations and\\n
.PD 0
.P
.PD
individuals whose tools, frameworks and wider contributions have\\n
.PD 0
.P
.PD
helped bring our work to fruition:\\n
.IP \[bu] 2
Free Software Foundation\\n* GNU Project\\n* Pandoc (John McFarlane)\\n*
Skidoo\\n
.SH PROJECT
.PP
NOTE: THIS DOCUMENTATION IS INCOMPLETE
.SS Introduction
.PP
SCDU is a portable data utility.
Although written in C++, it avoids the more
.PD 0
.P
.PD
complex C++ features and is strongly oriented towards traditional C in
POSIX
.PD 0
.P
.PD
environments.
.PP
There are a number of reasons for this approach:
.IP \[bu] 2
Performance
.IP \[bu] 2
Reliability
.IP \[bu] 2
Code size
.IP \[bu] 2
Cross\-platform support
.SS IDE
.PP
While there is nothing to stop the programmer from using his favourite
IDE
.PD 0
.P
.PD
during development, this project is IDE\-agnostic for the following
reasons:
.IP
.nf
\f[C]
*\ Build\ consistency
*\ Build\ automation\ 
*\ Programmer\ visibility
\f[]
.fi
.PP
This project can easily be maintained using a good programming editor
such as
.PD 0
.P
.PD
Sublime Text or Vim.
While there is scope for integrating modern IDE features
.PD 0
.P
.PD
into these editors (e.g.
code completion and low\-level debugging), eschewing
.PD 0
.P
.PD
these features can often result in better code quality by encouraging
the
.PD 0
.P
.PD
programmer to think about what he is doing instead of adopting a more
frenzied,
.PD 0
.P
.PD
trial\-and\-error approach.
.SS Project Directories
.PP
Sub\-directories are employed liberally to assist visibility and avoid
clutter,
.PD 0
.P
.PD
especially in the root directory:
.PP
Directory Description
.PD 0
.P
.PD
\-\-\-\-\-\-\-\-\-
\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-
.PD 0
.P
.PD
cmd/ development automation scripts
.PD 0
.P
.PD
src/ source code
.PD 0
.P
.PD
bld/ targets
.PD 0
.P
.PD
tmp/ temporary files
.PD 0
.P
.PD
run/ run\-time working directory
.PD 0
.P
.PD
\-\-\-\-\-\-\-\-\-
\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-
.SS Project Builds
.PP
The makefile supports incremental builds using GNU Make.
The make process is
.PD 0
.P
.PD
fully automated i.e.
there is no need to modify the makefile internals as the
.PD 0
.P
.PD
project evolves.
.PP
The makefile assumes that all CPP files in the src directory are to be
.PD 0
.P
.PD
compiled.
If you wish to temporarily remove a file from the project, change
.PD 0
.P
.PD
its extension to something like .cXX.
.PP
The build script places the appropriate GCC compiler and MSYS
directories in
.PD 0
.P
.PD
its shell path before performing a project make.
The intention is that this
.PD 0
.P
.PD
script can be extended to build binaries for all target platforms.
.PP
The following options are currently supported via the build script:
.IP
.nf
\f[C]
*\ build\ \ \ \ \ \ \ \ \ \ \ \ \ (incremental\ build)
*\ build\ run\ \ \ \ \ \ \ \ \ (incremental\ build\ and\ run)
*\ build\ all\ \ \ \ \ \ \ \ \ (complete\ re\-build)
\f[]
.fi
.PP
These build options can be incorporated into your editor menu and
keyboard
.PD 0
.P
.PD
shortcuts.
.PP
Note: Manually compiling individual source files outside of the
designated
.PD 0
.P
.PD
build/make process is to be avoided.
Incremental project builds offer fast
.PD 0
.P
.PD
design iterations and build consistency while encouraging the programmer
to
.PD 0
.P
.PD
introduce new functionality in a gradual and more controlled fashion.
With
.PD 0
.P
.PD
this approach, code quality is less likely to degrade as the project
evolves.
.SS Build Configurations
.PP
To generate the appropriate binary, set the following makefile
variables:
.IP
.nf
\f[C]
*\ BLD_MODE\ =\ DEBUG\ |\ RELEASE
*\ BLD_ARCH\ =\ 386\ |\ AMD64
*\ BLD_OS\ =\ WINDOWS\ |\ LINUX\ |\ DARWIN
\f[]
.fi
.PP
Note: LINUX and DARWIN support is coming soon!
.SS Testing
.PP
When testing your code, you can modify the scdu.bat script in the tst
directory
.PD 0
.P
.PD
to run the program executable with appropriate command\-line arguments.
.SS Documentation
.PP
Project documentation is maintained using simplified markdown (.md)
files.
.PD 0
.P
.PD
One markdown file is associated with each module and a project markdown
file
.PD 0
.P
.PD
(this one) offers a project overview.
Markdown files are normal text files
.PD 0
.P
.PD
with simple conventions which assist readability while facilitating
conversion
.PD 0
.P
.PD
to other more user\-friendly formats, e.g.
HTML.
.SS Naming Conventions
.PP
The following are general naming guidelines:
.PP
.TS
tab(@);
l l.
T{
Entity
T}@T{
Examples
T}
_
T{
Module
T}@T{
mymod.h; mymod.cpp
T}
T{
Class or Type
T}@T{
MyClass; MyType
T}
T{
Class Member (Private/Protected)
T}@T{
mMyMember
T}
T{
Class Member (Public)
T}@T{
myMember
T}
T{
Class Method
T}@T{
myMethod()
T}
T{
Struct or Union Field
T}@T{
myField
T}
T{
Function or Global Variable
T}@T{
myFunction(); myVariable
T}
T{
Function Argument or Local Variable
T}@T{
my_var
T}
.TE
.SS Build Script
.PP
build.sh
.PD 0
.P
.PD
build.mak
.PD 0
.P
.PD
build.log
.PD 0
.P
.PD
build.txt
.SH APP LIBRARY
.SS Copy Module
.PP
copy.h copy.cpp
.PP
Copy action implementation.
.SS Help Module
.PP
help.h help.cpp
.PP
Help action implementation.
.SS Info Module
.PP
info.h info.cpp
.PP
Info action implementation.
.SS Main Module
.PP
main.cpp
.PP
Program initialisation and termination.
.SS Show Module
.PP
show.h show.cpp
.PP
Show action implementation.
.SS View Module
.PP
view.h view.cpp
.PP
VIEW action implementation.
.SH APP LIBRARY
.SS Doc Module
.PP
doc.css
.PP
Cascading Style Sheet used for html generation.
.SH CORE LIBRARY
.SS Channels Module
.PP
Program output is directed using the \f[C]out..()\f[] family of
functions provided by
.PD 0
.P
.PD
this module.
.SS Source Files
.IP
.nf
\f[C]
channels.h
channels.cpp
\f[]
.fi
.SS Interface
.PP
This is a core module.
.IP
.nf
\f[C]
#include\ "core.h"
\f[]
.fi
.SS Channels
.PP
As a command\-line utility, \f[C]scdu\f[] can be run directly from a
console or indirectly
.PD 0
.P
.PD
under the control of a higher level script, shell utility or desktop
application.
.PP
The command syntax, exit codes and signal handling already present a
reliable
.PD 0
.P
.PD
API to upstream applications; however a flexible mechanism for
controlling
.PD 0
.P
.PD
program output is also desirable.
.PP
To address this need, program output is routed via pre\-defined channels
using
.PD 0
.P
.PD
simple letter designations which are also the suffixes of the
corresponding
.PD 0
.P
.PD
\f[C]out..()\f[] functions:
.IP
.nf
\f[C]
CHANNEL\ \ \ \ \ |\ FUNCTION\ |\ DESCRIPTION\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ 
\-\-\-\-\-\-\-\-\-\-\-\-|\-\-\-\-\-\-\-\-\-\-|\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-
C:\ Command\ \ |\ outC()\ \ \ |\ generate\ program\ preamble\ and\ postamble
S:\ Summary\ \ |\ outS()\ \ \ |\ summarise\ program\ execution\ stats\ \ \ \ \ 
\ \ \ \ \ \ \ \ \ \ \ \ |\ \ \ \ \ \ \ \ \ \ |
A:\ Action\ \ \ |\ outA()\ \ \ |\ indicate\ that\ current\ action\ has\ started
R:\ Result\ \ \ |\ outR()\ \ \ |\ generate\ action\ results\ \ \ \ 
P:\ Progress\ |\ outP()\ \ \ |\ track\ potentially\ long\-running\ action
\ \ \ \ \ \ \ \ \ \ \ \ |\ \ \ \ \ \ \ \ \ \ |\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ 
I:\ Info\ \ \ \ \ |\ outI()\ \ \ |\ log\ info
W:\ Warning\ \ |\ outW()\ \ \ |\ log\ warnings
E:\ Error\ \ \ \ |\ outE()\ \ \ |\ log\ errors
\ \ \ \ \ \ \ \ \ \ \ \ |\ \ \ \ \ \ \ \ \ \ |\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ 
V:\ Verbose\ \ |\ outV()\ \ \ |\ log\ extra\ info\ that\ is\ occasionally\ useful
D:\ Debug\ \ \ \ |\ outD()\ \ \ |\ log\ extra\ info\ to\ assist\ debugging\ \ \ \ \ \ \ \ \ \ 
T:\ Test\ \ \ \ \ |\ outT()\ \ \ |\ log\ temporary\ info\ during\ testing\ \ \ \ \ \ \ \ \ \ \ \ \ \ 
\f[]
.fi
.SS Output Streams
.PP
Currently, \f[C]scdu\f[] supports three output streams based on common
usage.
Channels
.PD 0
.P
.PD
can be individually routed to zero or more of these output streams using
the
.PD 0
.P
.PD
following command\-line options:
.IP
.nf
\f[C]
Option\ \ Default\ Stream\ \ Meaning\ \ \ \ \ Typical\ OS\ Equivalent
\-\-\-\-\-\-\-\ \-\-\-\-\-\-\-\ \-\-\-\-\-\-\-\ \-\-\-\-\-\-\-\-\-\-\-\ \-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-
\-rs\ \ \ \ \ R\ \ \ \ \ \ \ std\ \ \ \ \ standard\ \ \ \ stdout\ (usually\ line\ buffered)
\-rd\ \ \ \ \ *\-R\ \ \ \ \ dgn\ \ \ \ \ diagnostic\ \ stderr\ (usually\ unbuffered)
\-rl\ \ \ \ \ *\ \ \ \ \ \ \ log\ \ \ \ \ log\ file\ \ \ \ see\ `\-lf\ \-lm`\ options
\f[]
.fi
.PP
Note that it is possible to route any given channel to more than one
output
.PD 0
.P
.PD
stream simultaneously.
By default, only the R channel is routed to \f[C]std\f[] while
.PD 0
.P
.PD
all other channels are routed to \f[C]dgn\f[].
While \f[I]all\f[] channels are routed to \f[C]log\f[]
.PD 0
.P
.PD
by default, this stream is normally disabled.
.SS Debugging and Testing
.PP
Calls to \f[C]outD()\f[] are intended to remain in the code base
permanently.
So they
.PD 0
.P
.PD
should be employed sparingly and intelligently to facilitate
verification
.PD 0
.P
.PD
testing in response to bug reports, etc.
Actually, \f[C]outD()\f[] is a macro wrapper
.PD 0
.P
.PD
for the underlying \f[C]outD_()\f[] function which is compiled out of
production code
.PD 0
.P
.PD
to avoid performance degradation.
.PP
Conversely, the \f[C]outT()\f[] macro is intended for ad\-hoc/frenetic
test output
.PD 0
.P
.PD
during development and all such calls \f[I]must\f[] be removed from the
code base
.PD 0
.P
.PD
before performing a release build.
Any straggling \f[C]outT()\f[] calls in production
.PD 0
.P
.PD
code will generate compile errors.
.PP
In production code, the D and T channels can be routed to any output
stream
.PD 0
.P
.PD
without complaint, but this will have no effect.
.SS Flushing Streams
.PP
The \f[C]std\f[] and \f[C]dgn\f[] output streams often share the same
destination, typically
.PD 0
.P
.PD
a console.
In the absence of effective remedies, this can result in overlapping
.PD 0
.P
.PD
output which has long been the bane of command\-line utilities across
different
.PD 0
.P
.PD
operating systems.
More generally, as virtual consoles and external caching
.PD 0
.P
.PD
in multi\-process environments become the order of the day, there is a
need to
.PD 0
.P
.PD
incorporate "artifical" catchup delays to ensure that data from one
stream has
.PD 0
.P
.PD
been properly flushed before outputting data to another stream which
shares the
.PD 0
.P
.PD
same physical destination.
Simply emptying the output buffer of the underlying
.PD 0
.P
.PD
process is no guarantee that this will have happened whether the streams
are
.PD 0
.P
.PD
directed to a console, file or indeed a printer.
At the same time, gratuituous
.PD 0
.P
.PD
delays can have an adverse affect on performance, so some tweaking may
be
.PD 0
.P
.PD
desirable for any given deployment.
.PP
This capability is provided using the \f[C]\-fd\ \-ff\ \-fl\ \-fs\f[]
command\-line options.
.PP
Overlapping output is more likely during development when the
\f[C]std\f[] and \f[C]dgn\f[]
.PD 0
.P
.PD
streams are intercepted by the IDE.
To address this anomaly, more conservative
.PD 0
.P
.PD
catchup delays are employed in debug builds.
For the same reason, finely\-tuned
.PD 0
.P
.PD
flush settings are more likely to produce over\-lapping output in
production
.PD 0
.P
.PD
code when it is run from \f[I]within\f[] an IDE.
.SS Progress Channel
.PP
The progress channel is a special channel which can take advantage of
the \f[C]/r\f[]
.PD 0
.P
.PD
character (return without line feed) to over\-write each output line.
.PP
The objectives are:
.IP \[bu] 2
fit as much progress data in the available line width as possible
.IP \[bu] 2
line truncation should not leave partially populated data columns
.IP \[bu] 2
maintain column width consistency as far as is practicable
.IP \[bu] 2
prioritise columns with most relevant data
.IP \[bu] 2
provide command\-line options for controlling truncation and data
selection
.PP
Additional control of progress channel is provided by the
\f[C]\-pw\ \-ps\f[] command\-line
.PD 0
.P
.PD
options.
.SS Cmd Module
.PP
cmd.h cmd.cpp
.PP
Note: this is a core module (see core documentation).
.PP
The Cmd class holds user settings and environment variables for the
current
.PD 0
.P
.PD
execution cycle.
.PP
User settings consist of the current action, options and parameters.
All of
.PD 0
.P
.PD
these have consisent defaults which may be over\-ridden via the
command\-line.
.PD 0
.P
.PD
Options can also be specified in a configuration file using the \-cf
option.
.PP
The init() method parses the command\-line and config file (if
specified) to
.PD 0
.P
.PD
establish all environment variables and user settings for the current
cycle.
.PP
The global cmd object is a special instance of the Cmd class exposed to
the
.PD 0
.P
.PD
remaining the code base.
Since this object is accessed extensively, it is
.PD 0
.P
.PD
declared as a const for added safety.
To satisfy const correctness rules when
.PD 0
.P
.PD
calling the init() method, certain data members are declared as mutable.
.PD 0
.P
.PD
However, once the init() method gas been called successfully, all
settings are
.PD 0
.P
.PD
effectively locked.
.SS Options
.PP
Options can be specified using short symbols prefixed with a single
minus (\-)
.PD 0
.P
.PD
or longer names prefixed with a double minus (\-\-).
Short options are more suited
.PD 0
.P
.PD
to the command\-line where space is at a premium while the more
descriptive long
.PD 0
.P
.PD
option is more suited to a config file.
.SS Multi\-Options
.PP
Single character short\-option symbols are reserved for the most
ubiquitous flag
.PD 0
.P
.PD
options which may also be combined in compact groups by prefixing with a
plus(+)
.PD 0
.P
.PD
e.g.
+rfa
.SS Config File
.PP
All options (apart from \-cf) may be specified in a config file.
Global options
.PD 0
.P
.PD
at the top of the file represent the default for all actions which may
be
.PD 0
.P
.PD
over\-ridden in action\-specific sections preceded by \@ declarations.
.PD 0
.P
.PD
Comments lines may be included in the standard way using a leading #
character.
.PD 0
.P
.PD
Leading and trailing whitespace on each line is ignored, so indents may
be
.PD 0
.P
.PD
used to assist readability.
.PP
For increased versatility, the same option may be specified more than
once on
.PD 0
.P
.PD
the command\-line or config file.
When this happens, the following sequence is
.PD 0
.P
.PD
respected when values are over\-ridden:
.IP
.nf
\f[C]
1.\ options\ specified\ on\ the\ command\-line\ BEFORE\ the\ \-cf\ option
2.\ options\ specified\ in\ the\ global\ section\ of\ the\ config\ file
3.\ options\ specified\ in\ the\ action\-specific\ section\ of\ the\ config\ file
4.\ options\ specified\ on\ the\ command\-line\ AFTER\ the\ \-cf\ option
\f[]
.fi
.PP
Sample config file:
.PP
`
.PD 0
.P
.PD
# scdu.cfg
.PD 0
.P
.PD
# config file by Shane Callanan
.IP
.nf
\f[C]
#\ global\ options

\-\-progress\-rate=0.5

#\ action\-specific\ options

\@copy

\-\-route\-std=CA
\-\-route\-dgn=P
\-\-progress\-rate=0.5

\@help

\-\-route\-std=R
\f[]
.fi
.PP
`
.SS Core Module
.PP
core.h
.PP
This module includes the header files of core modules in the correct
sequence.
.PD 0
.P
.PD
Including core modules separately will generate a compiler error.
When including
.PD 0
.P
.PD
"core.h", always place it at the top of your project includes section.
.PP
The core module also includes any standard library modules required by
core
.PD 0
.P
.PD
module header files.
.SS Error Module
.PP
error.h error.cpp
.PP
Note: this is a core module (see core documentation).
.PP
This module provides a simple mechanism for raising and handling general
runtime
.PD 0
.P
.PD
errors (as distinct from program bugs) whereby the cause is identified
and the
.PD 0
.P
.PD
application can terminate gracefully with an appropriate exit code.
.PP
While this project is written in C++, it only uses C libraries as a
rule.
This
.PD 0
.P
.PD
means we are not forced to structure our code around C++ exception
handling
.PD 0
.P
.PD
which has a negative impact in the following areas:
.IP
.nf
\f[C]
*\ program\ complexity
*\ reliability
*\ performance
*\ code\ footprint
*\ memory\ usage
*\ debugging
\f[]
.fi
.PP
A simpler error handling mechanism is more suited to a non\-interactive
single\-
.PD 0
.P
.PD
threaded console application.
When a general error arises, such as an invalid
.PD 0
.P
.PD
command\-line option or a missing file, there is no need to catch an
exception
.PD 0
.P
.PD
to facilitate a retry or alternative action \-\- the program just has to
clean
.PD 0
.P
.PD
up and exit.
.SS General Errors
.PP
Use the xer() function to raise general errors and exit gracefully by
supplying
.PD 0
.P
.PD
the appropriate error code and parameters (where applicable).
Always do code
.PD 0
.P
.PD
coverage tests for new error conditions to ensure correct handling.
Be wary of
.PD 0
.P
.PD
error parameters which must obey printf() rules i.e.
the correct number of
.PD 0
.P
.PD
parameters must be supplied and they must be of the correct type and in
the
.PD 0
.P
.PD
correct sequence.
Note that, unlike printf and related functions, xer() cannot
.PD 0
.P
.PD
leverage GCC\[aq]s compile\-time format checking.
.PP
New error codes may be added to the Xen enumeration type in error.h and
the
.PD 0
.P
.PD
corresponding xerDefs array in error.cpp.
.PP
Note that errors are numbered internally from 0 and above.
Externally, they are
.PD 0
.P
.PD
offset by 64 to avoid clashes with OS exit codes.
.PP
Exit codes are scarce so use sparingly and only for "global" errors.
If a module
.PD 0
.P
.PD
detects multiple errors, it is better to reserve a single exit code
which
.PD 0
.P
.PD
accepts a "sub\-error" string paramater supplied by the module.
The module
.PD 0
.P
.PD
may also employ its own structured error\-handling (e.g.
the cmd module).
.SS Panics
.PP
Use the custom PANIC() macro for unrecoverable errors.
This macro calls the
.PD 0
.P
.PD
panic() function supplying the correct caller function, file and line
arguments.
.PP
Note that a panic error ends by calling abort() which bypasses normal
exit
.PD 0
.P
.PD
handling and will be detected by the OS as a crash.
.SS Assertions
.PP
Use the custom ASSERT() macro for quality assurance during development.
.PD 0
.P
.PD
Assertions are compiled out during release builds.
.PP
Use ASSERT_ALWAYS() for occasional assertions which need to be included
in
.PD 0
.P
.PD
production code.
The canonical use case is when an "unused variable" compiler
.PD 0
.P
.PD
warning appears after the standard assertion is compiled out.
But there are also
.PD 0
.P
.PD
times when ASSERT_ALWAYS() will give additional peace\-of\-mind in
complex code
.PD 0
.P
.PD
sections, especially when there is little or no peformance hit.
.PP
ASSERT_ALWAYS() is usually preferable to PANIC() because it is more
compact.
.PD 0
.P
.PD
PANIC() has the advantage of being able to supply custom error
information.
.PP
Assertion failures always generate a panic error
.SS Error Output
.PP
Both general and panic errors are reported on the stderr stream.
.PP
In most environments, these streams are routed to the same destination,
i.e.
.PD 0
.P
.PD
the console, in which case overlapping stdout/stderr text can be a
problem.
.PD 0
.P
.PD
To reduce the likelihood of this happening, stdout is flushed before
generating
.PD 0
.P
.PD
error output and stderr is then flushed before handing back control (the
latter
.PD 0
.P
.PD
operation is redundant on systems which have stderr unbuffered).
.PP
Note: for performance reasons, we must avoid the temptation to disable
buffering
.PD 0
.P
.PD
on stdout.
.SS Format Module
.PP
format.h format.cpp
.PP
Note: this is a core module (see core documentation).
.PP
This module implements useful formatters.
.SS Math Module
.PP
math.h math.cpp
.PP
Note: this is a core module (see core documentation).
.PP
Various math functions
.SS Mem Module
.PP
mem.h mem.cpp
.PP
Note: this is a core module (see core documentation).
.SS Memory Allocation
.PP
The memAlloc(), memRealloc() and memFree() function templates are
type\-specific
.PD 0
.P
.PD
variants of their generic C counterparts.
When used correctly, they can reduce
.PD 0
.P
.PD
the occurence of hard\-to\-isolate bugs due to unsafe type\-casting and
memory
.PD 0
.P
.PD
leaks.
They also allow internal memory allocations to be tracked.
.PP
All of these functions require a memory address "reference" as their
first
.PD 0
.P
.PD
argument, i.e.
a pointer\-to\-a\-pointer to the relevant type.
memRealloc() and
.PD 0
.P
.PD
memFree() also have a size check argument which is compared against the
.PD 0
.P
.PD
previously allocated size to ensure consistency.
.PP
To make it easier to track memory errors, particularly in destructors,
each of
.PD 0
.P
.PD
these functions requires the function name, source file and line number
of the
.PD 0
.P
.PD
caller.
Macro wrappers are defined to automate this process.
.PP
The C++ new and delete operators can throw exceptions which we wish to
avoid
.PD 0
.P
.PD
where possible.
At the same time, C++ has no equivalent to C\[aq]s realloc() which
.PD 0
.P
.PD
can produce signifiant performance gains in certain contexts.
All the more
.PD 0
.P
.PD
reason to provide more rugged variants of the classic C functions.
.PP
As a rule in this project, we avoid C++ templates like the plague.
In this case,
.PD 0
.P
.PD
we make a rare exception so that we can support a wide range of types.
.SS Parse Module
.PP
parse.h parse.cpp
.PP
Note: this is a core module (see core documentation).
.SS Basic Parse Functions
.PP
The standard library functions, strtol() and family, have the following
.PD 0
.P
.PD
limitations:
.IP
.nf
\f[C]
*\ They\ do\ not\ automatically\ detect\ hex\ values\ and\ other\ symbols
*\ They\ are\ too\ forgiving,\ converting\ any\ old\ garbage\ to\ zero
*\ They\ only\ detect\ range\ errors\ (for\ the\ given\ type)
\f[]
.fi
.PP
The basic parse functions provided by this module require string pointer
and
.PD 0
.P
.PD
value reference arguments.
They return the following integer values:
.IP
.nf
\f[C]
0:\ \ String\ successfully\ converted\ to\ value
\-1:\ String\ is\ badly\ formatted,\ value\ remains\ unchanged
+1:\ String\ is\ out\ of\ range,\ value\ remains\ unchanged
\f[]
.fi
.SS Advanced Parse Functions
.PP
These functions use a Var& reference to implement more advanced parsing.
As
.PD 0
.P
.PD
such, they return Pen type which gives more extensive error indication.
.SS Platform Module
.PP
platform.h platform.cpp
.PP
Note: this is a core module (see core documentation).
.PP
All platform\-specific code is contained within this module.
.SS File Streams
.PP
Custom wrappers are provided to present a consistent file stream
interface to
.PD 0
.P
.PD
the rest of our code base.
This is desirable because:
.IP
.nf
\f[C]
*\ Legacy\ libraries\ do\ not\ work\ reliably\ with\ the\ latest\ file\ systems.
*\ File\ sizes\ above\ 2GB\ are\ particularly\ problematic.
*\ Existing\ workarounds\ are\ not\ portabile.\ 
\f[]
.fi
.PP
See: FileOpen() FileClose() FileRead() FileWrite() FileSeek() FileTell()
etc.
.SS Fixed\-Width Integer Types
.PP
Portability of fixed\-width integer types is sadly lacking across
compilers and
.PD 0
.P
.PD
platforms, so we have defined our own types:
.PP
Uint8 Uint16 Uint32 Uint64 Int8 Int16 Int32 Int64
.SS 64\-bit Macros
.PP
Portability of 64\-bit literals and formatters is sadly lacking across
compilers
.PD 0
.P
.PD
and platforms, so we have defined our own macros:
.PD 0
.P
.PD
`
.PD 0
.P
.PD
U64(val): Literal for unsigned value
.PD 0
.P
.PD
I64(val): Literal for signed value
.PP
F64d(mod): Formatter for Signed Decimal
.PD 0
.P
.PD
F64u(mod): Formatter for Unsigned Decimal
.PD 0
.P
.PD
F64x(mod): Format as Hex (lowercase)
.PD 0
.P
.PD
F64X(mod): Format as Hex (uppercase)
.PD 0
.P
.PD
`
.PD 0
.P
.PD
The optional \[aq]mod\[aq] argument is used for inserting standard
modifiers between
.PD 0
.P
.PD
the % and the type specifier in the output format string.
.PP
Examples:
.PD 0
.P
.PD
`
.PD 0
.P
.PD
Int64 foo = I64(1234567);
.IP
.nf
\f[C]
printf("foo\ =\ "\ \ \ F64d()\ \ \ \ "\\n",\ foo);\ \ \ \ \ //\ foo\ =\ 1234567
printf("foo\ =\ "\ \ \ F64d(010)\ "\\n",\ foo);\ \ \ \ \ //\ foo\ =\ 0001234567
printf("foo\ =\ 0x"\ F64x()\ \ \ \ "\\n",\ foo);\ \ \ \ \ //\ foo\ =\ 0x12d687
printf("foo\ =\ 0x"\ F64x(016)\ "\\n",\ foo);\ \ \ \ \ //\ foo\ =\ 0x000000000012d687
printf("foo\ =\ 0X"\ F64X(016)\ "\\n",\ foo);\ \ \ \ \ //\ foo\ =\ 0X000000000012D687
\f[]
.fi
.PP
`
.SS Size Type
.PP
The Size type is an alias for size_t, an unsigned integer whose width
will
.PD 0
.P
.PD
depend on the target platform (32\-bit or 64\-bit).
This is reflected in the
.PD 0
.P
.PD
SIZE_MIN AND SIZE_MAX macros.
Formatting macros (FSu, FSd, FSx, FSX) are also
.PD 0
.P
.PD
required for portability.
.SS Timer Class
.PP
Clocks and timers are also notorious for portability, so a simple Timer
class
.PD 0
.P
.PD
is provided.
While this class will provide a consistent interface for each
.PD 0
.P
.PD
platform, resolution will vary.
The Read() method returns a \f[C]double\f[] value
.PD 0
.P
.PD
indicating the elapsed time in seconds.
Depending on the platform, the accuracy
.PD 0
.P
.PD
of this value can vary between nanoseconds and milliseconds.
.SS Quantity Module
.PP
quantity.h quantity.cpp
.PP
Note: this is a core module (see core documentation).
.PP
This module provides the basis for automating the parsing and formatting
of
.PD 0
.P
.PD
numeric quantities.
.SS Str Module
.PP
str.h str.cpp
.PP
Note: this is a core module (see core documentation).
.SS Str Class
.PP
This is a simple string class which uses a fixed internal buffer for
small
.PD 0
.P
.PD
strings and the heap for larger strings.
Unlike the standard string class,
.PD 0
.P
.PD
it uses malloc/realloc/free instead of new/delete therby avoiding
exceptions
.PD 0
.P
.PD
and introducing new efficiencies through the use of realloc().
.PP
Traditional C strings are still preferred, especially for local
variables.
.PD 0
.P
.PD
The Str class is handy in the following scenarios:
.IP
.nf
\f[C]
*\ The\ string\ size\ is\ unknown\ and/or\ potentially\ very\ large
*\ The\ string\ is\ global\ (or\ part\ of\ a\ global\ data\ structure/class)
\f[]
.fi
.SS Z Functions
.PP
Functions with a "z" suffix are variants of standard library string
functions
.PD 0
.P
.PD
which will always null terminate the target string even when the size
limit is
.PD 0
.P
.PD
reached.
It is assumed that the target buffer can hold at least one character
.PD 0
.P
.PD
more than the size argument.
.SS Type Module
.PP
type.h type.cpp
.PP
Note: this is a core module (see core documentation).
.PP
This module implements general\-purpose types and classes with useful
quality
.PD 0
.P
.PD
control and automation features.
.SS Pick Class
.PP
This class uses bit fields corressponding to lower and upper case
letters
.PD 0
.P
.PD
of the standard alphabet.
It is useful for encapsulting multiple selections.
.SS Value Module
.PP
value.h value.cpp
.PP
Note: this is a core module (see core documentation).
.PP
This module implements a general\-purpose value class with useful
automation
.PD 0
.P
.PD
features.
.SS Var Module
.PP
var.h var.cpp
.PP
Note: this is a core module (see core documentation).
.PP
Defines a "variable" type with automation features
.SH FFS LIBRARY
.SS File Module
.PP
file.h file.cpp
.PP
Application\-optimised file classes
.SS FileBuffer
.PP
A FileBuffer is an abstract class with the following concrete
implementations
.PD 0
.P
.PD
for reading and writing files:
.IP
.nf
\f[C]
*\ FileReader
*\ FileWriter
\f[]
.fi
.PP
A FileBuffer is analogous to a standard file stream.
However, it\[aq]s design is
.PD 0
.P
.PD
optimised for intensive operations on very large files e.g.
compression and
.PD 0
.P
.PD
decompression.
A custom class also allows scope for future enhancements,
.PD 0
.P
.PD
especially for overcoming platform and file system related quirks.
While
.PD 0
.P
.PD
standard file streams offer a certain amount of buffer control, this is
not
.PD 0
.P
.PD
always sufficient for our purposes.
.SH ALG LIBRARY
.SS Match Module
.PP
match.h match.cpp
.SS Pattern Matching
.PP
C lacks a good regex library.
Fortunately, we have simple pattern matching needs
.PD 0
.P
.PD
which can be implemented super\-efficiently without all of the regex
overhead.
.PD 0
.P
.PD
Note the use of gotos in the isMatch() family of functions.
.SH APPENDIX
.SS Known Bugs
.PP
There are no known bugs in the current release.
.SS Changes
.PP
0.0.1: first release with version control
.PD 0
.P
.PD
0.0.2: pack now generates checksum
.SS To Do
.IP \[bu] 2
Complete documentation generation
.IP \[bu] 2
Look at namespaces issue re.
external libs
.IP \[bu] 2
Add NET library skeleton
.IP \[bu] 2
Add X route to channels for IPC
.IP \[bu] 2
Add thread support to core lib
.IP \[bu] 2
Implement BP Algorithm as showcase for thread support
.SS GNU General Public License
.PP
Version 3, 29 June 2007
.PP
Copyright (C) 2007 Free Software Foundation, Inc.
.PD 0
.P
.PD
<http://fsf.org/>
.PP
Everyone is permitted to copy and distribute verbatim copies of this
.PD 0
.P
.PD
license document, but changing it is not allowed.
.SS Preamble
.PP
The GNU General Public License is a free, copyleft license for
.PD 0
.P
.PD
software and other kinds of works.
.PP
The licenses for most software and other practical works are designed
.PD 0
.P
.PD
to take away your freedom to share and change the works.
By contrast,
.PD 0
.P
.PD
the GNU General Public License is intended to guarantee your freedom
.PD 0
.P
.PD
to share and change all versions of a program\-\-to make sure it remains
.PD 0
.P
.PD
free software for all its users.
We, the Free Software Foundation, use
.PD 0
.P
.PD
the GNU General Public License for most of our software; it applies
.PD 0
.P
.PD
also to any other work released this way by its authors.
You can apply
.PD 0
.P
.PD
it to your programs, too.
.PP
When we speak of free software, we are referring to freedom, not
.PD 0
.P
.PD
price.
Our General Public Licenses are designed to make sure that you
.PD 0
.P
.PD
have the freedom to distribute copies of free software (and charge for
.PD 0
.P
.PD
them if you wish), that you receive source code or can get it if you
.PD 0
.P
.PD
want it, that you can change the software or use pieces of it in new
.PD 0
.P
.PD
free programs, and that you know you can do these things.
.PP
To protect your rights, we need to prevent others from denying you
.PD 0
.P
.PD
these rights or asking you to surrender the rights.
Therefore, you
.PD 0
.P
.PD
have certain responsibilities if you distribute copies of the
.PD 0
.P
.PD
software, or if you modify it: responsibilities to respect the freedom
.PD 0
.P
.PD
of others.
.PP
For example, if you distribute copies of such a program, whether
.PD 0
.P
.PD
gratis or for a fee, you must pass on to the recipients the same
.PD 0
.P
.PD
freedoms that you received.
You must make sure that they, too, receive
.PD 0
.P
.PD
or can get the source code.
And you must show them these terms so they
.PD 0
.P
.PD
know their rights.
.PP
Developers that use the GNU GPL protect your rights with two steps:
.PP
(1) assert copyright on the software, and (2) offer you this License
.PD 0
.P
.PD
giving you legal permission to copy, distribute and/or modify it.
.PP
For the developers\[aq] and authors\[aq] protection, the GPL clearly
explains
.PD 0
.P
.PD
that there is no warranty for this free software.
For both users\[aq] and
.PD 0
.P
.PD
authors\[aq] sake, the GPL requires that modified versions be marked as
.PD 0
.P
.PD
changed, so that their problems will not be attributed erroneously to
.PD 0
.P
.PD
authors of previous versions.
.PP
Some devices are designed to deny users access to install or run
.PD 0
.P
.PD
modified versions of the software inside them, although the
.PD 0
.P
.PD
manufacturer can do so.
This is fundamentally incompatible with the
.PD 0
.P
.PD
aim of protecting users\[aq] freedom to change the software.
The
.PD 0
.P
.PD
systematic pattern of such abuse occurs in the area of products for
.PD 0
.P
.PD
individuals to use, which is precisely where it is most unacceptable.
.PD 0
.P
.PD
Therefore, we have designed this version of the GPL to prohibit the
.PD 0
.P
.PD
practice for those products.
If such problems arise substantially in
.PD 0
.P
.PD
other domains, we stand ready to extend this provision to those
.PD 0
.P
.PD
domains in future versions of the GPL, as needed to protect the
.PD 0
.P
.PD
freedom of users.
.PP
Finally, every program is threatened constantly by software patents.
.PD 0
.P
.PD
States should not allow patents to restrict development and use of
.PD 0
.P
.PD
software on general\-purpose computers, but in those that do, we wish
.PD 0
.P
.PD
to avoid the special danger that patents applied to a free program
.PD 0
.P
.PD
could make it effectively proprietary.
To prevent this, the GPL
.PD 0
.P
.PD
assures that patents cannot be used to render the program non\-free.
.PP
The precise terms and conditions for copying, distribution and
.PD 0
.P
.PD
modification follow.
.SS Terms and Conditions
.SS 0. Definitions.
.PP
"This License" refers to version 3 of the GNU General Public License.
.PP
"Copyright" also means copyright\-like laws that apply to other kinds
.PD 0
.P
.PD
of works, such as semiconductor masks.
.PP
"The Program" refers to any copyrightable work licensed under this
.PD 0
.P
.PD
License.
Each licensee is addressed as "you".
"Licensees" and
.PD 0
.P
.PD
"recipients" may be individuals or organizations.
.PP
To "modify" a work means to copy from or adapt all or part of the work
.PD 0
.P
.PD
in a fashion requiring copyright permission, other than the making of
.PD 0
.P
.PD
an exact copy.
The resulting work is called a "modified version" of
.PD 0
.P
.PD
the earlier work or a work "based on" the earlier work.
.PP
A "covered work" means either the unmodified Program or a work based
.PD 0
.P
.PD
on the Program.
.PP
To "propagate" a work means to do anything with it that, without
.PD 0
.P
.PD
permission, would make you directly or secondarily liable for
.PD 0
.P
.PD
infringement under applicable copyright law, except executing it on a
.PD 0
.P
.PD
computer or modifying a private copy.
Propagation includes copying,
.PD 0
.P
.PD
distribution (with or without modification), making available to the
.PD 0
.P
.PD
public, and in some countries other activities as well.
.PP
To "convey" a work means any kind of propagation that enables other
.PD 0
.P
.PD
parties to make or receive copies.
Mere interaction with a user
.PD 0
.P
.PD
through a computer network, with no transfer of a copy, is not
.PD 0
.P
.PD
conveying.
.PP
An interactive user interface displays "Appropriate Legal Notices" to
.PD 0
.P
.PD
the extent that it includes a convenient and prominently visible
.PD 0
.P
.PD
feature that (1) displays an appropriate copyright notice, and (2)
.PD 0
.P
.PD
tells the user that there is no warranty for the work (except to the
.PD 0
.P
.PD
extent that warranties are provided), that licensees may convey the
.PD 0
.P
.PD
work under this License, and how to view a copy of this License.
If
.PD 0
.P
.PD
the interface presents a list of user commands or options, such as a
.PD 0
.P
.PD
menu, a prominent item in the list meets this criterion.
.SS 1. Source Code.
.PP
The "source code" for a work means the preferred form of the work for
.PD 0
.P
.PD
making modifications to it.
"Object code" means any non\-source form of
.PD 0
.P
.PD
a work.
.PP
A "Standard Interface" means an interface that either is an official
.PD 0
.P
.PD
standard defined by a recognized standards body, or, in the case of
.PD 0
.P
.PD
interfaces specified for a particular programming language, one that
.PD 0
.P
.PD
is widely used among developers working in that language.
.PP
The "System Libraries" of an executable work include anything, other
.PD 0
.P
.PD
than the work as a whole, that (a) is included in the normal form of
.PD 0
.P
.PD
packaging a Major Component, but which is not part of that Major
.PD 0
.P
.PD
Component, and (b) serves only to enable use of the work with that
.PD 0
.P
.PD
Major Component, or to implement a Standard Interface for which an
.PD 0
.P
.PD
implementation is available to the public in source code form.
A
.PD 0
.P
.PD
"Major Component", in this context, means a major essential component
.PD 0
.P
.PD
(kernel, window system, and so on) of the specific operating system
.PD 0
.P
.PD
(if any) on which the executable work runs, or a compiler used to
.PD 0
.P
.PD
produce the work, or an object code interpreter used to run it.
.PP
The "Corresponding Source" for a work in object code form means all
.PD 0
.P
.PD
the source code needed to generate, install, and (for an executable
.PD 0
.P
.PD
work) run the object code and to modify the work, including scripts to
.PD 0
.P
.PD
control those activities.
However, it does not include the work\[aq]s
.PD 0
.P
.PD
System Libraries, or general\-purpose tools or generally available free
.PD 0
.P
.PD
programs which are used unmodified in performing those activities but
.PD 0
.P
.PD
which are not part of the work.
For example, Corresponding Source
.PD 0
.P
.PD
includes interface definition files associated with source files for
.PD 0
.P
.PD
the work, and the source code for shared libraries and dynamically
.PD 0
.P
.PD
linked subprograms that the work is specifically designed to require,
.PD 0
.P
.PD
such as by intimate data communication or control flow between those
.PD 0
.P
.PD
subprograms and other parts of the work.
.PP
The Corresponding Source need not include anything that users can
.PD 0
.P
.PD
regenerate automatically from other parts of the Corresponding Source.
.PP
The Corresponding Source for a work in source code form is that same
.PD 0
.P
.PD
work.
.SS 2. Basic Permissions.
.PP
All rights granted under this License are granted for the term of
.PD 0
.P
.PD
copyright on the Program, and are irrevocable provided the stated
.PD 0
.P
.PD
conditions are met.
This License explicitly affirms your unlimited
.PD 0
.P
.PD
permission to run the unmodified Program.
The output from running a
.PD 0
.P
.PD
covered work is covered by this License only if the output, given its
.PD 0
.P
.PD
content, constitutes a covered work.
This License acknowledges your
.PD 0
.P
.PD
rights of fair use or other equivalent, as provided by copyright law.
.PP
You may make, run and propagate covered works that you do not convey,
.PD 0
.P
.PD
without conditions so long as your license otherwise remains in force.
.PD 0
.P
.PD
You may convey covered works to others for the sole purpose of having
.PD 0
.P
.PD
them make modifications exclusively for you, or provide you with
.PD 0
.P
.PD
facilities for running those works, provided that you comply with the
.PD 0
.P
.PD
terms of this License in conveying all material for which you do not
.PD 0
.P
.PD
control copyright.
Those thus making or running the covered works for
.PD 0
.P
.PD
you must do so exclusively on your behalf, under your direction and
.PD 0
.P
.PD
control, on terms that prohibit them from making any copies of your
.PD 0
.P
.PD
copyrighted material outside their relationship with you.
.PP
Conveying under any other circumstances is permitted solely under the
.PD 0
.P
.PD
conditions stated below.
Sublicensing is not allowed; section 10 makes
.PD 0
.P
.PD
it unnecessary.
.SS 3. Protecting Users\[aq] Legal Rights From Anti\-Circumvention Law.
.PP
No covered work shall be deemed part of an effective technological
.PD 0
.P
.PD
measure under any applicable law fulfilling obligations under article
.PD 0
.P
.PD
11 of the WIPO copyright treaty adopted on 20 December 1996, or
.PD 0
.P
.PD
similar laws prohibiting or restricting circumvention of such
.PD 0
.P
.PD
measures.
.PP
When you convey a covered work, you waive any legal power to forbid
.PD 0
.P
.PD
circumvention of technological measures to the extent such
.PD 0
.P
.PD
circumvention is effected by exercising rights under this License with
.PD 0
.P
.PD
respect to the covered work, and you disclaim any intention to limit
.PD 0
.P
.PD
operation or modification of the work as a means of enforcing, against
.PD 0
.P
.PD
the work\[aq]s users, your or third parties\[aq] legal rights to forbid
.PD 0
.P
.PD
circumvention of technological measures.
.SS 4. Conveying Verbatim Copies.
.PP
You may convey verbatim copies of the Program\[aq]s source code as you
.PD 0
.P
.PD
receive it, in any medium, provided that you conspicuously and
.PD 0
.P
.PD
appropriately publish on each copy an appropriate copyright notice;
.PD 0
.P
.PD
keep intact all notices stating that this License and any
.PD 0
.P
.PD
non\-permissive terms added in accord with section 7 apply to the code;
.PD 0
.P
.PD
keep intact all notices of the absence of any warranty; and give all
.PD 0
.P
.PD
recipients a copy of this License along with the Program.
.PP
You may charge any price or no price for each copy that you convey,
.PD 0
.P
.PD
and you may offer support or warranty protection for a fee.
.SS 5. Conveying Modified Source Versions.
.PP
You may convey a work based on the Program, or the modifications to
.PD 0
.P
.PD
produce it from the Program, in the form of source code under the
.PD 0
.P
.PD
terms of section 4, provided that you also meet all of these
.PD 0
.P
.PD
conditions:
.IP \[bu] 2
a) The work must carry prominent notices stating that you modified
.PD 0
.P
.PD
it, and giving a relevant date.
.IP \[bu] 2
b) The work must carry prominent notices stating that it is
.PD 0
.P
.PD
released under this License and any conditions added under
.PD 0
.P
.PD
section 7.
This requirement modifies the requirement in section 4
.PD 0
.P
.PD
to "keep intact all notices".
.IP \[bu] 2
c) You must license the entire work, as a whole, under this
.PD 0
.P
.PD
License to anyone who comes into possession of a copy.
This
.PD 0
.P
.PD
License will therefore apply, along with any applicable section 7
.PD 0
.P
.PD
additional terms, to the whole of the work, and all its parts,
.PD 0
.P
.PD
regardless of how they are packaged.
This License gives no
.PD 0
.P
.PD
permission to license the work in any other way, but it does not
.PD 0
.P
.PD
invalidate such permission if you have separately received it.
.IP \[bu] 2
d) If the work has interactive user interfaces, each must display
.PD 0
.P
.PD
Appropriate Legal Notices; however, if the Program has interactive
.PD 0
.P
.PD
interfaces that do not display Appropriate Legal Notices, your
.PD 0
.P
.PD
work need not make them do so.
.PP
A compilation of a covered work with other separate and independent
.PD 0
.P
.PD
works, which are not by their nature extensions of the covered work,
.PD 0
.P
.PD
and which are not combined with it such as to form a larger program,
.PD 0
.P
.PD
in or on a volume of a storage or distribution medium, is called an
.PD 0
.P
.PD
"aggregate" if the compilation and its resulting copyright are not
.PD 0
.P
.PD
used to limit the access or legal rights of the compilation\[aq]s users
.PD 0
.P
.PD
beyond what the individual works permit.
Inclusion of a covered work
.PD 0
.P
.PD
in an aggregate does not cause this License to apply to the other
.PD 0
.P
.PD
parts of the aggregate.
.SS 6. Conveying Non\-Source Forms.
.PP
You may convey a covered work in object code form under the terms of
.PD 0
.P
.PD
sections 4 and 5, provided that you also convey the machine\-readable
.PD 0
.P
.PD
Corresponding Source under the terms of this License, in one of these
.PD 0
.P
.PD
ways:
.IP \[bu] 2
a) Convey the object code in, or embodied in, a physical product
.PD 0
.P
.PD
(including a physical distribution medium), accompanied by the
.PD 0
.P
.PD
Corresponding Source fixed on a durable physical medium
.PD 0
.P
.PD
customarily used for software interchange.
.IP \[bu] 2
b) Convey the object code in, or embodied in, a physical product
.PD 0
.P
.PD
(including a physical distribution medium), accompanied by a
.PD 0
.P
.PD
written offer, valid for at least three years and valid for as
.PD 0
.P
.PD
long as you offer spare parts or customer support for that product
.PD 0
.P
.PD
model, to give anyone who possesses the object code either (1) a
.PD 0
.P
.PD
copy of the Corresponding Source for all the software in the
.PD 0
.P
.PD
product that is covered by this License, on a durable physical
.PD 0
.P
.PD
medium customarily used for software interchange, for a price no
.PD 0
.P
.PD
more than your reasonable cost of physically performing this
.PD 0
.P
.PD
conveying of source, or (2) access to copy the Corresponding
.PD 0
.P
.PD
Source from a network server at no charge.
.IP \[bu] 2
c) Convey individual copies of the object code with a copy of the
.PD 0
.P
.PD
written offer to provide the Corresponding Source.
This
.PD 0
.P
.PD
alternative is allowed only occasionally and noncommercially, and
.PD 0
.P
.PD
only if you received the object code with such an offer, in accord
.PD 0
.P
.PD
with subsection 6b.
.IP \[bu] 2
d) Convey the object code by offering access from a designated
.PD 0
.P
.PD
place (gratis or for a charge), and offer equivalent access to the
.PD 0
.P
.PD
Corresponding Source in the same way through the same place at no
.PD 0
.P
.PD
further charge.
You need not require recipients to copy the
.PD 0
.P
.PD
Corresponding Source along with the object code.
If the place to
.PD 0
.P
.PD
copy the object code is a network server, the Corresponding Source
.PD 0
.P
.PD
may be on a different server (operated by you or a third party)
.PD 0
.P
.PD
that supports equivalent copying facilities, provided you maintain
.PD 0
.P
.PD
clear directions next to the object code saying where to find the
.PD 0
.P
.PD
Corresponding Source.
Regardless of what server hosts the
.PD 0
.P
.PD
Corresponding Source, you remain obligated to ensure that it is
.PD 0
.P
.PD
available for as long as needed to satisfy these requirements.
.IP \[bu] 2
e) Convey the object code using peer\-to\-peer transmission,
.PD 0
.P
.PD
provided you inform other peers where the object code and
.PD 0
.P
.PD
Corresponding Source of the work are being offered to the general
.PD 0
.P
.PD
public at no charge under subsection 6d.
.PP
A separable portion of the object code, whose source code is excluded
.PD 0
.P
.PD
from the Corresponding Source as a System Library, need not be
.PD 0
.P
.PD
included in conveying the object code work.
.PP
A "User Product" is either (1) a "consumer product", which means any
.PD 0
.P
.PD
tangible personal property which is normally used for personal,
.PD 0
.P
.PD
family, or household purposes, or (2) anything designed or sold for
.PD 0
.P
.PD
incorporation into a dwelling.
In determining whether a product is a
.PD 0
.P
.PD
consumer product, doubtful cases shall be resolved in favor of
.PD 0
.P
.PD
coverage.
For a particular product received by a particular user,
.PD 0
.P
.PD
"normally used" refers to a typical or common use of that class of
.PD 0
.P
.PD
product, regardless of the status of the particular user or of the way
.PD 0
.P
.PD
in which the particular user actually uses, or expects or is expected
.PD 0
.P
.PD
to use, the product.
A product is a consumer product regardless of
.PD 0
.P
.PD
whether the product has substantial commercial, industrial or
.PD 0
.P
.PD
non\-consumer uses, unless such uses represent the only significant
.PD 0
.P
.PD
mode of use of the product.
.PP
"Installation Information" for a User Product means any methods,
.PD 0
.P
.PD
procedures, authorization keys, or other information required to
.PD 0
.P
.PD
install and execute modified versions of a covered work in that User
.PD 0
.P
.PD
Product from a modified version of its Corresponding Source.
The
.PD 0
.P
.PD
information must suffice to ensure that the continued functioning of
.PD 0
.P
.PD
the modified object code is in no case prevented or interfered with
.PD 0
.P
.PD
solely because modification has been made.
.PP
If you convey an object code work under this section in, or with, or
.PD 0
.P
.PD
specifically for use in, a User Product, and the conveying occurs as
.PD 0
.P
.PD
part of a transaction in which the right of possession and use of the
.PD 0
.P
.PD
User Product is transferred to the recipient in perpetuity or for a
.PD 0
.P
.PD
fixed term (regardless of how the transaction is characterized), the
.PD 0
.P
.PD
Corresponding Source conveyed under this section must be accompanied
.PD 0
.P
.PD
by the Installation Information.
But this requirement does not apply
.PD 0
.P
.PD
if neither you nor any third party retains the ability to install
.PD 0
.P
.PD
modified object code on the User Product (for example, the work has
.PD 0
.P
.PD
been installed in ROM).
.PP
The requirement to provide Installation Information does not include a
.PD 0
.P
.PD
requirement to continue to provide support service, warranty, or
.PD 0
.P
.PD
updates for a work that has been modified or installed by the
.PD 0
.P
.PD
recipient, or for the User Product in which it has been modified or
.PD 0
.P
.PD
installed.
Access to a network may be denied when the modification
.PD 0
.P
.PD
itself materially and adversely affects the operation of the network
.PD 0
.P
.PD
or violates the rules and protocols for communication across the
.PD 0
.P
.PD
network.
.PP
Corresponding Source conveyed, and Installation Information provided,
.PD 0
.P
.PD
in accord with this section must be in a format that is publicly
.PD 0
.P
.PD
documented (and with an implementation available to the public in
.PD 0
.P
.PD
source code form), and must require no special password or key for
.PD 0
.P
.PD
unpacking, reading or copying.
.SS 7. Additional Terms.
.PP
"Additional permissions" are terms that supplement the terms of this
.PD 0
.P
.PD
License by making exceptions from one or more of its conditions.
.PD 0
.P
.PD
Additional permissions that are applicable to the entire Program shall
.PD 0
.P
.PD
be treated as though they were included in this License, to the extent
.PD 0
.P
.PD
that they are valid under applicable law.
If additional permissions
.PD 0
.P
.PD
apply only to part of the Program, that part may be used separately
.PD 0
.P
.PD
under those permissions, but the entire Program remains governed by
.PD 0
.P
.PD
this License without regard to the additional permissions.
.PP
When you convey a copy of a covered work, you may at your option
.PD 0
.P
.PD
remove any additional permissions from that copy, or from any part of
.PD 0
.P
.PD
it.
(Additional permissions may be written to require their own
.PD 0
.P
.PD
removal in certain cases when you modify the work.) You may place
.PD 0
.P
.PD
additional permissions on material, added by you to a covered work,
.PD 0
.P
.PD
for which you have or can give appropriate copyright permission.
.PP
Notwithstanding any other provision of this License, for material you
.PD 0
.P
.PD
add to a covered work, you may (if authorized by the copyright holders
.PD 0
.P
.PD
of that material) supplement the terms of this License with terms:
.IP \[bu] 2
a) Disclaiming warranty or limiting liability differently from the
.PD 0
.P
.PD
terms of sections 15 and 16 of this License; or
.IP \[bu] 2
b) Requiring preservation of specified reasonable legal notices or
.PD 0
.P
.PD
author attributions in that material or in the Appropriate Legal
.PD 0
.P
.PD
Notices displayed by works containing it; or
.IP \[bu] 2
c) Prohibiting misrepresentation of the origin of that material,
.PD 0
.P
.PD
or requiring that modified versions of such material be marked in
.PD 0
.P
.PD
reasonable ways as different from the original version; or
.IP \[bu] 2
d) Limiting the use for publicity purposes of names of licensors
.PD 0
.P
.PD
or authors of the material; or
.IP \[bu] 2
e) Declining to grant rights under trademark law for use of some
.PD 0
.P
.PD
trade names, trademarks, or service marks; or
.IP \[bu] 2
f) Requiring indemnification of licensors and authors of that
.PD 0
.P
.PD
material by anyone who conveys the material (or modified versions
.PD 0
.P
.PD
of it) with contractual assumptions of liability to the recipient,
.PD 0
.P
.PD
for any liability that these contractual assumptions directly
.PD 0
.P
.PD
impose on those licensors and authors.
.PP
All other non\-permissive additional terms are considered "further
.PD 0
.P
.PD
restrictions" within the meaning of section 10.
If the Program as you
.PD 0
.P
.PD
received it, or any part of it, contains a notice stating that it is
.PD 0
.P
.PD
governed by this License along with a term that is a further
.PD 0
.P
.PD
restriction, you may remove that term.
If a license document contains
.PD 0
.P
.PD
a further restriction but permits relicensing or conveying under this
.PD 0
.P
.PD
License, you may add to a covered work material governed by the terms
.PD 0
.P
.PD
of that license document, provided that the further restriction does
.PD 0
.P
.PD
not survive such relicensing or conveying.
.PP
If you add terms to a covered work in accord with this section, you
.PD 0
.P
.PD
must place, in the relevant source files, a statement of the
.PD 0
.P
.PD
additional terms that apply to those files, or a notice indicating
.PD 0
.P
.PD
where to find the applicable terms.
.PP
Additional terms, permissive or non\-permissive, may be stated in the
.PD 0
.P
.PD
form of a separately written license, or stated as exceptions; the
.PD 0
.P
.PD
above requirements apply either way.
.SS 8. Termination.
.PP
You may not propagate or modify a covered work except as expressly
.PD 0
.P
.PD
provided under this License.
Any attempt otherwise to propagate or
.PD 0
.P
.PD
modify it is void, and will automatically terminate your rights under
.PD 0
.P
.PD
this License (including any patent licenses granted under the third
.PD 0
.P
.PD
paragraph of section 11).
.PP
However, if you cease all violation of this License, then your license
.PD 0
.P
.PD
from a particular copyright holder is reinstated (a) provisionally,
.PD 0
.P
.PD
unless and until the copyright holder explicitly and finally
.PD 0
.P
.PD
terminates your license, and (b) permanently, if the copyright holder
.PD 0
.P
.PD
fails to notify you of the violation by some reasonable means prior to
.PD 0
.P
.PD
60 days after the cessation.
.PP
Moreover, your license from a particular copyright holder is
.PD 0
.P
.PD
reinstated permanently if the copyright holder notifies you of the
.PD 0
.P
.PD
violation by some reasonable means, this is the first time you have
.PD 0
.P
.PD
received notice of violation of this License (for any work) from that
.PD 0
.P
.PD
copyright holder, and you cure the violation prior to 30 days after
.PD 0
.P
.PD
your receipt of the notice.
.PP
Termination of your rights under this section does not terminate the
.PD 0
.P
.PD
licenses of parties who have received copies or rights from you under
.PD 0
.P
.PD
this License.
If your rights have been terminated and not permanently
.PD 0
.P
.PD
reinstated, you do not qualify to receive new licenses for the same
.PD 0
.P
.PD
material under section 10.
.SS 9. Acceptance Not Required for Having Copies.
.PP
You are not required to accept this License in order to receive or run
.PD 0
.P
.PD
a copy of the Program.
Ancillary propagation of a covered work
.PD 0
.P
.PD
occurring solely as a consequence of using peer\-to\-peer transmission
.PD 0
.P
.PD
to receive a copy likewise does not require acceptance.
However,
.PD 0
.P
.PD
nothing other than this License grants you permission to propagate or
.PD 0
.P
.PD
modify any covered work.
These actions infringe copyright if you do
.PD 0
.P
.PD
not accept this License.
Therefore, by modifying or propagating a
.PD 0
.P
.PD
covered work, you indicate your acceptance of this License to do so.
.SS 10. Automatic Licensing of Downstream Recipients.
.PP
Each time you convey a covered work, the recipient automatically
.PD 0
.P
.PD
receives a license from the original licensors, to run, modify and
.PD 0
.P
.PD
propagate that work, subject to this License.
You are not responsible
.PD 0
.P
.PD
for enforcing compliance by third parties with this License.
.PP
An "entity transaction" is a transaction transferring control of an
.PD 0
.P
.PD
organization, or substantially all assets of one, or subdividing an
.PD 0
.P
.PD
organization, or merging organizations.
If propagation of a covered
.PD 0
.P
.PD
work results from an entity transaction, each party to that
.PD 0
.P
.PD
transaction who receives a copy of the work also receives whatever
.PD 0
.P
.PD
licenses to the work the party\[aq]s predecessor in interest had or
could
.PD 0
.P
.PD
give under the previous paragraph, plus a right to possession of the
.PD 0
.P
.PD
Corresponding Source of the work from the predecessor in interest, if
.PD 0
.P
.PD
the predecessor has it or can get it with reasonable efforts.
.PP
You may not impose any further restrictions on the exercise of the
.PD 0
.P
.PD
rights granted or affirmed under this License.
For example, you may
.PD 0
.P
.PD
not impose a license fee, royalty, or other charge for exercise of
.PD 0
.P
.PD
rights granted under this License, and you may not initiate litigation
.PD 0
.P
.PD
(including a cross\-claim or counterclaim in a lawsuit) alleging that
.PD 0
.P
.PD
any patent claim is infringed by making, using, selling, offering for
.PD 0
.P
.PD
sale, or importing the Program or any portion of it.
.SS 11. Patents.
.PP
A "contributor" is a copyright holder who authorizes use under this
.PD 0
.P
.PD
License of the Program or a work on which the Program is based.
The
.PD 0
.P
.PD
work thus licensed is called the contributor\[aq]s "contributor
version".
.PP
A contributor\[aq]s "essential patent claims" are all patent claims
owned
.PD 0
.P
.PD
or controlled by the contributor, whether already acquired or
.PD 0
.P
.PD
hereafter acquired, that would be infringed by some manner, permitted
.PD 0
.P
.PD
by this License, of making, using, or selling its contributor version,
.PD 0
.P
.PD
but do not include claims that would be infringed only as a
.PD 0
.P
.PD
consequence of further modification of the contributor version.
For
.PD 0
.P
.PD
purposes of this definition, "control" includes the right to grant
.PD 0
.P
.PD
patent sublicenses in a manner consistent with the requirements of
.PD 0
.P
.PD
this License.
.PP
Each contributor grants you a non\-exclusive, worldwide, royalty\-free
.PD 0
.P
.PD
patent license under the contributor\[aq]s essential patent claims, to
.PD 0
.P
.PD
make, use, sell, offer for sale, import and otherwise run, modify and
.PD 0
.P
.PD
propagate the contents of its contributor version.
.PP
In the following three paragraphs, a "patent license" is any express
.PD 0
.P
.PD
agreement or commitment, however denominated, not to enforce a patent
.PD 0
.P
.PD
(such as an express permission to practice a patent or covenant not to
.PD 0
.P
.PD
sue for patent infringement).
To "grant" such a patent license to a
.PD 0
.P
.PD
party means to make such an agreement or commitment not to enforce a
.PD 0
.P
.PD
patent against the party.
.PP
If you convey a covered work, knowingly relying on a patent license,
.PD 0
.P
.PD
and the Corresponding Source of the work is not available for anyone
.PD 0
.P
.PD
to copy, free of charge and under the terms of this License, through a
.PD 0
.P
.PD
publicly available network server or other readily accessible means,
.PD 0
.P
.PD
then you must either (1) cause the Corresponding Source to be so
.PD 0
.P
.PD
available, or (2) arrange to deprive yourself of the benefit of the
.PD 0
.P
.PD
patent license for this particular work, or (3) arrange, in a manner
.PD 0
.P
.PD
consistent with the requirements of this License, to extend the patent
.PD 0
.P
.PD
license to downstream recipients.
"Knowingly relying" means you have
.PD 0
.P
.PD
actual knowledge that, but for the patent license, your conveying the
.PD 0
.P
.PD
covered work in a country, or your recipient\[aq]s use of the covered
work
.PD 0
.P
.PD
in a country, would infringe one or more identifiable patents in that
.PD 0
.P
.PD
country that you have reason to believe are valid.
.PP
If, pursuant to or in connection with a single transaction or
.PD 0
.P
.PD
arrangement, you convey, or propagate by procuring conveyance of, a
.PD 0
.P
.PD
covered work, and grant a patent license to some of the parties
.PD 0
.P
.PD
receiving the covered work authorizing them to use, propagate, modify
.PD 0
.P
.PD
or convey a specific copy of the covered work, then the patent license
.PD 0
.P
.PD
you grant is automatically extended to all recipients of the covered
.PD 0
.P
.PD
work and works based on it.
.PP
A patent license is "discriminatory" if it does not include within the
.PD 0
.P
.PD
scope of its coverage, prohibits the exercise of, or is conditioned on
.PD 0
.P
.PD
the non\-exercise of one or more of the rights that are specifically
.PD 0
.P
.PD
granted under this License.
You may not convey a covered work if you
.PD 0
.P
.PD
are a party to an arrangement with a third party that is in the
.PD 0
.P
.PD
business of distributing software, under which you make payment to the
.PD 0
.P
.PD
third party based on the extent of your activity of conveying the
.PD 0
.P
.PD
work, and under which the third party grants, to any of the parties
.PD 0
.P
.PD
who would receive the covered work from you, a discriminatory patent
.PD 0
.P
.PD
license (a) in connection with copies of the covered work conveyed by
.PD 0
.P
.PD
you (or copies made from those copies), or (b) primarily for and in
.PD 0
.P
.PD
connection with specific products or compilations that contain the
.PD 0
.P
.PD
covered work, unless you entered into that arrangement, or that patent
.PD 0
.P
.PD
license was granted, prior to 28 March 2007.
.PP
Nothing in this License shall be construed as excluding or limiting
.PD 0
.P
.PD
any implied license or other defenses to infringement that may
.PD 0
.P
.PD
otherwise be available to you under applicable patent law.
.SS 12. No Surrender of Others\[aq] Freedom.
.PP
If conditions are imposed on you (whether by court order, agreement or
.PD 0
.P
.PD
otherwise) that contradict the conditions of this License, they do not
.PD 0
.P
.PD
excuse you from the conditions of this License.
If you cannot convey a
.PD 0
.P
.PD
covered work so as to satisfy simultaneously your obligations under
.PD 0
.P
.PD
this License and any other pertinent obligations, then as a
.PD 0
.P
.PD
consequence you may not convey it at all.
For example, if you agree to
.PD 0
.P
.PD
terms that obligate you to collect a royalty for further conveying
.PD 0
.P
.PD
from those to whom you convey the Program, the only way you could
.PD 0
.P
.PD
satisfy both those terms and this License would be to refrain entirely
.PD 0
.P
.PD
from conveying the Program.
.SS 13. Use with the GNU Affero General Public License.
.PP
Notwithstanding any other provision of this License, you have
.PD 0
.P
.PD
permission to link or combine any covered work with a work licensed
.PD 0
.P
.PD
under version 3 of the GNU Affero General Public License into a single
.PD 0
.P
.PD
combined work, and to convey the resulting work.
The terms of this
.PD 0
.P
.PD
License will continue to apply to the part which is the covered work,
.PD 0
.P
.PD
but the special requirements of the GNU Affero General Public License,
.PD 0
.P
.PD
section 13, concerning interaction through a network will apply to the
.PD 0
.P
.PD
combination as such.
.SS 14. Revised Versions of this License.
.PP
The Free Software Foundation may publish revised and/or new versions
.PD 0
.P
.PD
of the GNU General Public License from time to time.
Such new versions
.PD 0
.P
.PD
will be similar in spirit to the present version, but may differ in
.PD 0
.P
.PD
detail to address new problems or concerns.
.PP
Each version is given a distinguishing version number.
If the Program
.PD 0
.P
.PD
specifies that a certain numbered version of the GNU General Public
.PD 0
.P
.PD
License "or any later version" applies to it, you have the option of
.PD 0
.P
.PD
following the terms and conditions either of that numbered version or
.PD 0
.P
.PD
of any later version published by the Free Software Foundation.
If the
.PD 0
.P
.PD
Program does not specify a version number of the GNU General Public
.PD 0
.P
.PD
License, you may choose any version ever published by the Free
.PD 0
.P
.PD
Software Foundation.
.PP
If the Program specifies that a proxy can decide which future versions
.PD 0
.P
.PD
of the GNU General Public License can be used, that proxy\[aq]s public
.PD 0
.P
.PD
statement of acceptance of a version permanently authorizes you to
.PD 0
.P
.PD
choose that version for the Program.
.PP
Later license versions may give you additional or different
.PD 0
.P
.PD
permissions.
However, no additional obligations are imposed on any
.PD 0
.P
.PD
author or copyright holder as a result of your choosing to follow a
.PD 0
.P
.PD
later version.
.SS 15. Disclaimer of Warranty.
.PP
THERE IS NO WARRANTY FOR THE PROGRAM, TO THE EXTENT PERMITTED BY
.PD 0
.P
.PD
APPLICABLE LAW.
EXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT
.PD 0
.P
.PD
HOLDERS AND/OR OTHER PARTIES PROVIDE THE PROGRAM "AS IS" WITHOUT
.PD 0
.P
.PD
WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT NOT
.PD 0
.P
.PD
LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
.PD 0
.P
.PD
A PARTICULAR PURPOSE.
THE ENTIRE RISK AS TO THE QUALITY AND
.PD 0
.P
.PD
PERFORMANCE OF THE PROGRAM IS WITH YOU.
SHOULD THE PROGRAM PROVE
.PD 0
.P
.PD
DEFECTIVE, YOU ASSUME THE COST OF ALL NECESSARY SERVICING, REPAIR OR
.PD 0
.P
.PD
CORRECTION.
.SS 16. Limitation of Liability.
.PP
IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING
.PD 0
.P
.PD
WILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MODIFIES AND/OR
.PD 0
.P
.PD
CONVEYS THE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES,
.PD 0
.P
.PD
INCLUDING ANY GENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES
.PD 0
.P
.PD
ARISING OUT OF THE USE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT
.PD 0
.P
.PD
NOT LIMITED TO LOSS OF DATA OR DATA BEING RENDERED INACCURATE OR
.PD 0
.P
.PD
LOSSES SUSTAINED BY YOU OR THIRD PARTIES OR A FAILURE OF THE PROGRAM
.PD 0
.P
.PD
TO OPERATE WITH ANY OTHER PROGRAMS), EVEN IF SUCH HOLDER OR OTHER
.PD 0
.P
.PD
PARTY HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGES.
.SS 17. Interpretation of Sections 15 and 16.
.PP
If the disclaimer of warranty and limitation of liability provided
.PD 0
.P
.PD
above cannot be given local legal effect according to their terms,
.PD 0
.P
.PD
reviewing courts shall apply local law that most closely approximates
.PD 0
.P
.PD
an absolute waiver of all civil liability in connection with the
.PD 0
.P
.PD
Program, unless a warranty or assumption of liability accompanies a
.PD 0
.P
.PD
copy of the Program in return for a fee.
.PP
END OF TERMS AND CONDITIONS
.SS How to Apply These Terms to Your New Programs
.PP
If you develop a new program, and you want it to be of the greatest
.PD 0
.P
.PD
possible use to the public, the best way to achieve this is to make it
.PD 0
.P
.PD
free software which everyone can redistribute and change under these
.PD 0
.P
.PD
terms.
.PP
To do so, attach the following notices to the program.
It is safest to
.PD 0
.P
.PD
attach them to the start of each source file to most effectively state
.PD 0
.P
.PD
the exclusion of warranty; and each file should have at least the
.PD 0
.P
.PD
"copyright" line and a pointer to where the full notice is found.
.IP
.nf
\f[C]
\ \ \ \ <one\ line\ to\ give\ the\ program\[aq]s\ name\ and\ a\ brief\ idea\ of\ what\ it\ does.>
\ \ \ \ Copyright\ (C)\ <year>\ \ <name\ of\ author>

\ \ \ \ This\ program\ is\ free\ software:\ you\ can\ redistribute\ it\ and/or\ modify
\ \ \ \ it\ under\ the\ terms\ of\ the\ GNU\ General\ Public\ License\ as\ published\ by
\ \ \ \ the\ Free\ Software\ Foundation,\ either\ version\ 3\ of\ the\ License,\ or
\ \ \ \ (at\ your\ option)\ any\ later\ version.

\ \ \ \ This\ program\ is\ distributed\ in\ the\ hope\ that\ it\ will\ be\ useful,
\ \ \ \ but\ WITHOUT\ ANY\ WARRANTY;\ without\ even\ the\ implied\ warranty\ of
\ \ \ \ MERCHANTABILITY\ or\ FITNESS\ FOR\ A\ PARTICULAR\ PURPOSE.\ \ See\ the
\ \ \ \ GNU\ General\ Public\ License\ for\ more\ details.

\ \ \ \ You\ should\ have\ received\ a\ copy\ of\ the\ GNU\ General\ Public\ License
\ \ \ \ along\ with\ this\ program.\ \ If\ not,\ see\ <http://www.gnu.org/licenses/>.
\f[]
.fi
.PP
Also add information on how to contact you by electronic and paper
.PD 0
.P
.PD
mail.
.PP
If the program does terminal interaction, make it output a short
.PD 0
.P
.PD
notice like this when it starts in an interactive mode:
.IP
.nf
\f[C]
\ \ \ \ <program>\ \ Copyright\ (C)\ <year>\ \ <name\ of\ author>
\ \ \ \ This\ program\ comes\ with\ ABSOLUTELY\ NO\ WARRANTY;\ for\ details\ type\ `show\ w\[aq].
\ \ \ \ This\ is\ free\ software,\ and\ you\ are\ welcome\ to\ redistribute\ it
\ \ \ \ under\ certain\ conditions;\ type\ `show\ c\[aq]\ for\ details.
\f[]
.fi
.PP
The hypothetical commands `show w\[aq] and `show c\[aq] should show the
.PD 0
.P
.PD
appropriate parts of the General Public License.
Of course, your
.PD 0
.P
.PD
program\[aq]s commands might be different; for a GUI interface, you
would
.PD 0
.P
.PD
use an "about box".
.PP
You should also get your employer (if you work as a programmer) or
.PD 0
.P
.PD
school, if any, to sign a "copyright disclaimer" for the program, if
.PD 0
.P
.PD
necessary.
For more information on this, and how to apply and follow
.PD 0
.P
.PD
the GNU GPL, see <http://www.gnu.org/licenses/>.
.PP
The GNU General Public License does not permit incorporating your
.PD 0
.P
.PD
program into proprietary programs.
If your program is a subroutine
.PD 0
.P
.PD
library, you may consider it more useful to permit linking proprietary
.PD 0
.P
.PD
applications with the library.
If this is what you want to do, use the
.PD 0
.P
.PD
GNU Lesser General Public License instead of this License.
But first,
.PD 0
.P
.PD
please read <http://www.gnu.org/philosophy/why-not-lgpl.html>.
