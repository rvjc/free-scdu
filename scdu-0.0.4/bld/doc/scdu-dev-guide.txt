% SCDU Developer Guide
% RVJ Callanan
% 2017-09-05

# ABOUT

Terms of Use
============

Copyright (C) 2015-2017 RVJ Callanan

SCDU is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

SCDU is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with SCDU.  If not, see <http://www.gnu.org/licenses/>.

Contributors
============

The SCDU Project recognises the contributions of the following
individuals in the key areas of design, management, coding,
testing, documentation and support:

* Shane Callanan, Carlow Institute of Technology
* Dennis Callanan, Maynooth University
* David Callanan, Gaelcholaiste Ceatharlach

Acknowledgements================

The SCDU Project acknowledges the following organisations and\n
individuals whose tools, frameworks and wider contributions have\n
helped bring our work to fruition:\n

* Free Software Foundation\n* GNU Project\n* Pandoc (John McFarlane)\n* Skidoo\n

# PROJECT

NOTE: THIS DOCUMENTATION IS INCOMPLETE 

## Introduction

SCDU is a portable data utility. Although written in C++, it avoids the more
complex C++ features and is strongly oriented towards traditional C in POSIX
environments.

There are a number of reasons for this approach:

* Performance
* Reliability
* Code size
* Cross-platform support

### IDE

While there is nothing to stop the programmer from using his favourite IDE
during development, this project is IDE-agnostic for the following reasons:

    * Build consistency
    * Build automation 
    * Programmer visibility

This project can easily be maintained using a good programming editor such as
Sublime Text or Vim. While there is scope for integrating modern IDE features
into these editors (e.g. code completion and low-level debugging), eschewing
these features can often result in better code quality by encouraging the
programmer to think about what he is doing instead of adopting a more frenzied,
trial-and-error approach. 


### Project Directories

Sub-directories are employed liberally to assist visibility and avoid clutter,
especially in the root directory:

Directory Description
--------- -------------------------------------------
cmd/      development automation scripts
src/      source code
bld/      targets
tmp/      temporary files 
run/      run-time working directory
--------- -------------------------------------------

### Project Builds

The makefile supports incremental builds using GNU Make. The make process is
fully automated i.e. there is no need to modify the makefile internals as the
project evolves.

The makefile assumes that all CPP files in the src directory are to be
compiled. If you wish to temporarily remove a file from the project, change
its extension to something like .cXX.

The build script places the appropriate GCC compiler and MSYS directories in
its shell path before performing a project make. The intention is that this
script can be extended to build binaries for all target platforms. 

The following options are currently supported via the build script:
    
    * build             (incremental build)
    * build run         (incremental build and run)
    * build all         (complete re-build)

These build options can be incorporated into your editor menu and keyboard
shortcuts.

Note: Manually compiling individual source files outside of the designated
build/make process is to be avoided. Incremental project builds offer fast
design iterations and build consistency while encouraging the programmer to
introduce new functionality in a gradual and more controlled fashion. With
this approach, code quality is less likely to degrade as the project evolves.

### Build Configurations

To generate the appropriate binary, set the following makefile variables:

    * BLD_MODE = DEBUG | RELEASE
    * BLD_ARCH = 386 | AMD64
    * BLD_OS = WINDOWS | LINUX | DARWIN

Note: LINUX and DARWIN support is coming soon!

### Testing

When testing your code, you can modify the scdu.bat script in the tst directory
to run the program executable with appropriate command-line arguments.

### Documentation

Project documentation is maintained using simplified markdown (.md) files.
One markdown file is associated with each module and a project markdown file
(this one) offers a project overview. Markdown files are normal text files
with simple conventions which assist readability while facilitating conversion
to other more user-friendly formats, e.g. HTML.

### Naming Conventions

The following are general naming guidelines:

| Entity                                  | Examples                        |
|:----------------------------------------|:--------------------------------|
| Module                                  | mymod.h; mymod.cpp              |
| Class or Type                           | MyClass; MyType                 | 
| Class Member (Private/Protected)        | mMyMember                       | 
| Class Member (Public)                   | myMember                        | 
| Class Method                            | myMethod()                      | 
| Struct or Union Field                   | myField                         | 
| Function or Global Variable             | myFunction(); myVariable        | 
| Function Argument or Local Variable     | my_var                          |

## Build Script

build.sh 
build.mak
build.log
build.txt

# APP LIBRARY

## Copy Module

copy.h copy.cpp

Copy action implementation.

## Help Module

help.h help.cpp

Help action implementation.

## Info Module

info.h info.cpp

Info action implementation.

## Main Module

main.cpp

Program initialisation and termination.

## Show Module

show.h show.cpp

Show action implementation.

## View Module

view.h view.cpp

VIEW action implementation.

# APP LIBRARY

## Doc Module

doc.css

Cascading Style Sheet used for html generation.

# CORE LIBRARY

## Channels Module

Program output is directed using the `out..()` family of functions provided by
this module.

### Source Files

    channels.h
    channels.cpp

### Interface

This is a core module.

    #include "core.h"

### Channels

As a command-line utility, `scdu` can be run directly from a console or indirectly
under the control of a higher level script, shell utility or desktop application.

The command syntax, exit codes and signal handling already present a reliable
API to upstream applications; however a flexible mechanism for controlling
program output is also desirable.

To address this need, program output is routed via pre-defined channels using
simple letter designations which are also the suffixes of the corresponding
`out..()` functions:

    CHANNEL     | FUNCTION | DESCRIPTION                                 
    ------------|----------|-------------------------------------------
    C: Command  | outC()   | generate program preamble and postamble
    S: Summary  | outS()   | summarise program execution stats     
                |          |
    A: Action   | outA()   | indicate that current action has started
    R: Result   | outR()   | generate action results    
    P: Progress | outP()   | track potentially long-running action
                |          |                                             
    I: Info     | outI()   | log info
    W: Warning  | outW()   | log warnings
    E: Error    | outE()   | log errors
                |          |                                             
    V: Verbose  | outV()   | log extra info that is occasionally useful
    D: Debug    | outD()   | log extra info to assist debugging          
    T: Test     | outT()   | log temporary info during testing              

### Output Streams

Currently, `scdu` supports three output streams based on common usage. Channels
can be individually routed to zero or more of these output streams using the
following command-line options:

    Option  Default Stream  Meaning     Typical OS Equivalent
    ------- ------- ------- ----------- --------------------------------------
    -rs     R       std     standard    stdout (usually line buffered)
    -rd     *-R     dgn     diagnostic  stderr (usually unbuffered)
    -rl     *       log     log file    see `-lf -lm` options

Note that it is possible to route any given channel to more than one output
stream simultaneously. By default, only the R channel is routed to `std` while
all other channels are routed to `dgn`. While *all* channels are routed to `log`
by default, this stream is normally disabled.

### Debugging and Testing

Calls to `outD()` are intended to remain in the code base permanently. So they
should be employed sparingly and intelligently to facilitate verification
testing in response to bug reports, etc. Actually, `outD()` is a macro wrapper
for the underlying `outD_()` function which is compiled out of production code
to avoid performance degradation.

Conversely, the `outT()` macro is intended for ad-hoc/frenetic test output
during development and all such calls *must* be removed from the code base
before performing a release build. Any straggling `outT()` calls in production
code will generate compile errors.

In production code, the D and T channels can be routed to any output stream
without complaint, but this will have no effect.

### Flushing Streams

The `std` and `dgn` output streams often share the same destination, typically
a console. In the absence of effective remedies, this can result in overlapping
output which has long been the bane of command-line utilities across different
operating systems. More generally, as virtual consoles and external caching
in multi-process environments become the order of the day, there is a need to
incorporate "artifical" catchup delays to ensure that data from one stream has
been properly flushed before outputting data to another stream which shares the
same physical destination. Simply emptying the output buffer of the underlying
process is no guarantee that this will have happened whether the streams are
directed to a console, file or indeed a printer. At the same time, gratuituous
delays can have an adverse affect on performance, so some tweaking may be
desirable for any given deployment.

This capability is provided using the `-fd -ff -fl -fs` command-line options.

Overlapping output is more likely during development when the `std` and `dgn`
streams are intercepted by the IDE. To address this anomaly, more conservative
catchup delays are employed in debug builds. For the same reason, finely-tuned
flush settings are more likely to produce over-lapping output in production
code when it is run from *within* an IDE.

### Progress Channel

The progress channel is a special channel which can take advantage of the `/r`
character (return without line feed) to over-write each output line.

The objectives are:

- fit as much progress data in the available line width as possible
- line truncation should not leave partially populated data columns
- maintain column width consistency as far as is practicable
- prioritise columns with most relevant data
- provide command-line options for controlling truncation and data selection

Additional control of progress channel is provided by the `-pw -ps` command-line
options.

## Cmd Module

cmd.h cmd.cpp

Note: this is a core module (see core documentation).

The Cmd class holds user settings and environment variables for the current
execution cycle.

User settings consist of the current action, options and parameters. All of
these have consisent defaults which may be over-ridden via the command-line.
Options can also be specified in a configuration file using the -cf option.

The init() method parses the command-line and config file (if specified) to
establish all environment variables and user settings for the current cycle. 

The global cmd object is a special instance of the Cmd class exposed to the
remaining the code base. Since this object is accessed extensively, it is
declared as a const for added safety. To satisfy const correctness rules when
calling the init() method, certain data members are declared as mutable.
However, once the init() method gas been called successfully, all settings are
effectively locked.

### Options

Options can be specified using short symbols prefixed with a single minus (-)
or longer names prefixed with a double minus (--). Short options are more suited
to the command-line where space is at a premium while the more descriptive long
option is more suited to a config file.

### Multi-Options

Single character short-option symbols are reserved for the most ubiquitous flag
options which may also be combined in compact groups by prefixing with a plus(+)
e.g. +rfa 

### Config File

All options (apart from -cf) may be specified in a config file. Global options
at the top of the file represent the default for all actions which may be
over-ridden in action-specific sections preceded by @<action> declarations.
Comments lines may be included in the standard way using a leading # character.
Leading and trailing whitespace on each line is ignored, so indents may be
used to assist readability. 

For increased versatility, the same option may be specified more than once on
the command-line or config file. When this happens, the following sequence is
respected when values are over-ridden:

    1. options specified on the command-line BEFORE the -cf option
    2. options specified in the global section of the config file
    3. options specified in the action-specific section of the config file
    4. options specified on the command-line AFTER the -cf option

Sample config file:

`
    # scdu.cfg
    # config file by Shane Callanan

    # global options

    --progress-rate=0.5

    # action-specific options

    @copy

    --route-std=CA
    --route-dgn=P
    --progress-rate=0.5

    @help

    --route-std=R
`

## Core Module

core.h

This module includes the header files of core modules in the correct sequence.
Including core modules separately will generate a compiler error. When including
"core.h", always place it at the top of your project includes section. 

The core module also includes any standard library modules required by core
module header files.

## Error Module

error.h error.cpp

Note: this is a core module (see core documentation).

This module provides a simple mechanism for raising and handling general runtime
errors (as distinct from program bugs) whereby the cause is identified and the
application can terminate gracefully with an appropriate exit code.

While this project is written in C++, it only uses C libraries as a rule. This
means we are not forced to structure our code around C++ exception handling
which has a negative impact in the following areas:

    * program complexity
    * reliability
    * performance
    * code footprint
    * memory usage
    * debugging

A simpler error handling mechanism is more suited to a non-interactive single-
threaded console application. When a general error arises, such as an invalid
command-line option or a missing file, there is no need to catch an exception
to facilitate a retry or alternative action -- the program just has to clean
up and exit.

### General Errors

Use the xer() function to raise general errors and exit gracefully by supplying
the appropriate error code and parameters (where applicable). Always do code
coverage tests for new error conditions to ensure correct handling. Be wary of
error parameters which must obey printf() rules i.e. the correct number of
parameters must be supplied and they must be of the correct type and in the
correct sequence. Note that, unlike printf and related functions, xer() cannot
leverage GCC's compile-time format checking. 

New error codes may be added to the Xen enumeration type in error.h and the
corresponding xerDefs array in error.cpp.

Note that errors are numbered internally from 0 and above. Externally, they are
offset by 64 to avoid clashes with OS exit codes.

Exit codes are scarce so use sparingly and only for "global" errors. If a module
detects multiple errors, it is better to reserve a single exit code which
accepts a "sub-error" string paramater supplied by the module. The module
may also employ its own structured error-handling (e.g. the cmd module).

### Panics

Use the custom PANIC() macro for unrecoverable errors. This macro calls the
panic() function supplying the correct caller function, file and line arguments.

Note that a panic error ends by calling abort() which bypasses normal exit
handling and will be detected by the OS as a crash.

### Assertions

Use the custom ASSERT() macro for quality assurance during development.
Assertions are compiled out during release builds.

Use ASSERT_ALWAYS() for occasional assertions which need to be included in
production code. The canonical use case is when an "unused variable" compiler
warning appears after the standard assertion is compiled out. But there are also
times when ASSERT_ALWAYS() will give additional peace-of-mind in complex code
sections, especially when there is little or no peformance hit.

ASSERT_ALWAYS() is usually preferable to PANIC() because it is more compact.
PANIC() has the advantage of being able to supply custom error information.  

Assertion failures always generate a panic error

### Error Output

Both general and panic errors are reported on the stderr stream. 

In most environments, these streams are routed to the same destination, i.e.
the console, in which case overlapping stdout/stderr text can be a problem.
To reduce the likelihood of this happening, stdout is flushed before generating
error output and stderr is then flushed before handing back control (the latter
operation is redundant on systems which have stderr unbuffered).

Note: for performance reasons, we must avoid the temptation to disable buffering
on stdout. 

## Format Module

format.h format.cpp

Note: this is a core module (see core documentation).

This module implements useful formatters.

## Math Module

math.h math.cpp

Note: this is a core module (see core documentation).

Various math functions

## Mem Module

mem.h mem.cpp

Note: this is a core module (see core documentation).

### Memory Allocation

The memAlloc(), memRealloc() and memFree() function templates are type-specific
variants of their generic C counterparts. When used correctly, they can reduce
the occurence of hard-to-isolate bugs due to unsafe type-casting and memory
leaks. They also allow internal memory allocations to be tracked.

All of these functions require a memory address "reference" as their first
argument, i.e. a pointer-to-a-pointer to the relevant type. memRealloc() and
memFree() also have a size check argument which is compared against the
previously allocated size to ensure consistency. 

To make it easier to track memory errors, particularly in destructors, each of
these functions requires the function name, source file and line number of the
caller. Macro wrappers are defined to automate this process.  

The C++ new and delete operators can throw exceptions which we wish to avoid
where possible. At the same time, C++ has no equivalent to C's realloc() which
can produce signifiant performance gains in certain contexts. All the more
reason to provide more rugged variants of the classic C functions.

As a rule in this project, we avoid C++ templates like the plague. In this case,
we make a rare exception so that we can support a wide range of types.

## Parse Module

parse.h parse.cpp

Note: this is a core module (see core documentation).

### Basic Parse Functions

The standard library functions, strtol() and family, have the following
limitations:

    * They do not automatically detect hex values and other symbols
    * They are too forgiving, converting any old garbage to zero
    * They only detect range errors (for the given type)

The basic parse functions provided by this module require string pointer and
value reference arguments. They return the following integer values:  

    0:  String successfully converted to value
    -1: String is badly formatted, value remains unchanged
    +1: String is out of range, value remains unchanged

### Advanced Parse Functions

These functions use a Var& reference to implement more advanced parsing. As
such, they return Pen type which gives more extensive error indication.

## Platform Module

platform.h platform.cpp

Note: this is a core module (see core documentation).

All platform-specific code is contained within this module.

### File Streams

Custom wrappers are provided to present a consistent file stream interface to
the rest of our code base. This is desirable because:

    * Legacy libraries do not work reliably with the latest file systems.
    * File sizes above 2GB are particularly problematic.
    * Existing workarounds are not portabile. 

See: FileOpen() FileClose() FileRead() FileWrite() FileSeek() FileTell() etc.

### Fixed-Width Integer Types

Portability of fixed-width integer types is sadly lacking across compilers and
platforms, so we have defined our own types:

Uint8 Uint16 Uint32 Uint64 Int8 Int16 Int32 Int64

### 64-bit Macros

Portability of 64-bit literals and formatters is sadly lacking across compilers
and platforms, so we have defined our own macros:
`
U64(val):  Literal for unsigned value
I64(val):  Literal for signed value

F64d(mod): Formatter for Signed Decimal
F64u(mod): Formatter for Unsigned Decimal
F64x(mod): Format as Hex (lowercase)
F64X(mod): Format as Hex (uppercase)
`
The optional 'mod' argument is used for inserting standard modifiers between
the % and the type specifier in the output format string. 

Examples:
`
    Int64 foo = I64(1234567);
    
    printf("foo = "   F64d()    "\n", foo);     // foo = 1234567
    printf("foo = "   F64d(010) "\n", foo);     // foo = 0001234567
    printf("foo = 0x" F64x()    "\n", foo);     // foo = 0x12d687
    printf("foo = 0x" F64x(016) "\n", foo);     // foo = 0x000000000012d687
    printf("foo = 0X" F64X(016) "\n", foo);     // foo = 0X000000000012D687
`

### Size Type

The Size type is an alias for size_t, an unsigned integer whose width will
depend on the target platform (32-bit or 64-bit). This is reflected in the
SIZE_MIN AND SIZE_MAX macros. Formatting macros (FSu, FSd, FSx, FSX) are also
required for portability. 

### Timer Class

Clocks and timers are also notorious for portability, so a simple Timer class
is provided. While this class will provide a consistent interface for each
platform, resolution will vary. The Read() method returns a `double` value
indicating the elapsed time in seconds. Depending on the platform, the accuracy
of this value can vary between nanoseconds and milliseconds.

## Quantity Module

quantity.h quantity.cpp

Note: this is a core module (see core documentation).

This module provides the basis for automating the parsing and formatting of
numeric quantities.

## Str Module

str.h str.cpp

Note: this is a core module (see core documentation).

### Str Class

This is a simple string class which uses a fixed internal buffer for small
strings and the heap for larger strings. Unlike the standard string class,
it uses malloc/realloc/free instead of new/delete therby avoiding exceptions
and introducing new efficiencies through the use of realloc().

Traditional C strings are still preferred, especially for local variables.
The Str class is handy in the following scenarios:

    * The string size is unknown and/or potentially very large
    * The string is global (or part of a global data structure/class)

### Z Functions

Functions with a "z" suffix are variants of standard library string functions
which will always null terminate the target string even when the size limit is
reached. It is assumed that the target buffer can hold at least one character
more than the size argument.

## Type Module

type.h type.cpp

Note: this is a core module (see core documentation).

This module implements general-purpose types and classes with useful quality
control and automation features.

### Pick Class

This class uses bit fields corressponding to lower and upper case letters
of the standard alphabet. It is useful for encapsulting multiple selections.

## Value Module

value.h value.cpp

Note: this is a core module (see core documentation).

This module implements a general-purpose value class with useful automation
features.

## Var Module

var.h var.cpp

Note: this is a core module (see core documentation).

Defines a "variable" type with automation features

# FFS LIBRARY

## File Module

file.h file.cpp

Application-optimised file classes

### FileBuffer 

A FileBuffer is an abstract class with the following concrete implementations
for reading and writing files:

    * FileReader
    * FileWriter

A FileBuffer is analogous to a standard file stream. However, it's design is
optimised for intensive operations on very large files e.g. compression and
decompression. A custom class also allows scope for future enhancements,
especially for overcoming platform and file system related quirks. While
standard file streams offer a certain amount of buffer control, this is not
always sufficient for our purposes.

# ALG LIBRARY

## Match Module

match.h match.cpp

### Pattern Matching

C lacks a good regex library. Fortunately, we have simple pattern matching needs
which can be implemented super-efficiently without all of the regex overhead.
Note the use of gotos in the isMatch() family of functions.

# APPENDIX

## Known Bugs

There are no known bugs in the current release.

## Changes

0.0.1: first release with version control
0.0.2: pack now generates checksum

## To Do

* Complete documentation generation
* Look at namespaces issue re. external libs
* Add NET library skeleton
* Add X route to channels for IPC
* Add thread support to core lib
* Implement BP Algorithm as showcase for thread support

## GNU General Public License

Version 3, 29 June 2007

Copyright (C) 2007 Free Software Foundation, Inc.
<http://fsf.org/>

Everyone is permitted to copy and distribute verbatim copies of this
license document, but changing it is not allowed.

### Preamble

The GNU General Public License is a free, copyleft license for
software and other kinds of works.

The licenses for most software and other practical works are designed
to take away your freedom to share and change the works. By contrast,
the GNU General Public License is intended to guarantee your freedom
to share and change all versions of a program--to make sure it remains
free software for all its users. We, the Free Software Foundation, use
the GNU General Public License for most of our software; it applies
also to any other work released this way by its authors. You can apply
it to your programs, too.

When we speak of free software, we are referring to freedom, not
price. Our General Public Licenses are designed to make sure that you
have the freedom to distribute copies of free software (and charge for
them if you wish), that you receive source code or can get it if you
want it, that you can change the software or use pieces of it in new
free programs, and that you know you can do these things.

To protect your rights, we need to prevent others from denying you
these rights or asking you to surrender the rights. Therefore, you
have certain responsibilities if you distribute copies of the
software, or if you modify it: responsibilities to respect the freedom
of others.

For example, if you distribute copies of such a program, whether
gratis or for a fee, you must pass on to the recipients the same
freedoms that you received. You must make sure that they, too, receive
or can get the source code. And you must show them these terms so they
know their rights.

Developers that use the GNU GPL protect your rights with two steps:
(1) assert copyright on the software, and (2) offer you this License
giving you legal permission to copy, distribute and/or modify it.

For the developers' and authors' protection, the GPL clearly explains
that there is no warranty for this free software. For both users' and
authors' sake, the GPL requires that modified versions be marked as
changed, so that their problems will not be attributed erroneously to
authors of previous versions.

Some devices are designed to deny users access to install or run
modified versions of the software inside them, although the
manufacturer can do so. This is fundamentally incompatible with the
aim of protecting users' freedom to change the software. The
systematic pattern of such abuse occurs in the area of products for
individuals to use, which is precisely where it is most unacceptable.
Therefore, we have designed this version of the GPL to prohibit the
practice for those products. If such problems arise substantially in
other domains, we stand ready to extend this provision to those
domains in future versions of the GPL, as needed to protect the
freedom of users.

Finally, every program is threatened constantly by software patents.
States should not allow patents to restrict development and use of
software on general-purpose computers, but in those that do, we wish
to avoid the special danger that patents applied to a free program
could make it effectively proprietary. To prevent this, the GPL
assures that patents cannot be used to render the program non-free.

The precise terms and conditions for copying, distribution and
modification follow.

### Terms and Conditions

#### 0. Definitions.

"This License" refers to version 3 of the GNU General Public License.

"Copyright" also means copyright-like laws that apply to other kinds
of works, such as semiconductor masks.

"The Program" refers to any copyrightable work licensed under this
License. Each licensee is addressed as "you". "Licensees" and
"recipients" may be individuals or organizations.

To "modify" a work means to copy from or adapt all or part of the work
in a fashion requiring copyright permission, other than the making of
an exact copy. The resulting work is called a "modified version" of
the earlier work or a work "based on" the earlier work.

A "covered work" means either the unmodified Program or a work based
on the Program.

To "propagate" a work means to do anything with it that, without
permission, would make you directly or secondarily liable for
infringement under applicable copyright law, except executing it on a
computer or modifying a private copy. Propagation includes copying,
distribution (with or without modification), making available to the
public, and in some countries other activities as well.

To "convey" a work means any kind of propagation that enables other
parties to make or receive copies. Mere interaction with a user
through a computer network, with no transfer of a copy, is not
conveying.

An interactive user interface displays "Appropriate Legal Notices" to
the extent that it includes a convenient and prominently visible
feature that (1) displays an appropriate copyright notice, and (2)
tells the user that there is no warranty for the work (except to the
extent that warranties are provided), that licensees may convey the
work under this License, and how to view a copy of this License. If
the interface presents a list of user commands or options, such as a
menu, a prominent item in the list meets this criterion.

#### 1. Source Code.

The "source code" for a work means the preferred form of the work for
making modifications to it. "Object code" means any non-source form of
a work.

A "Standard Interface" means an interface that either is an official
standard defined by a recognized standards body, or, in the case of
interfaces specified for a particular programming language, one that
is widely used among developers working in that language.

The "System Libraries" of an executable work include anything, other
than the work as a whole, that (a) is included in the normal form of
packaging a Major Component, but which is not part of that Major
Component, and (b) serves only to enable use of the work with that
Major Component, or to implement a Standard Interface for which an
implementation is available to the public in source code form. A
"Major Component", in this context, means a major essential component
(kernel, window system, and so on) of the specific operating system
(if any) on which the executable work runs, or a compiler used to
produce the work, or an object code interpreter used to run it.

The "Corresponding Source" for a work in object code form means all
the source code needed to generate, install, and (for an executable
work) run the object code and to modify the work, including scripts to
control those activities. However, it does not include the work's
System Libraries, or general-purpose tools or generally available free
programs which are used unmodified in performing those activities but
which are not part of the work. For example, Corresponding Source
includes interface definition files associated with source files for
the work, and the source code for shared libraries and dynamically
linked subprograms that the work is specifically designed to require,
such as by intimate data communication or control flow between those
subprograms and other parts of the work.

The Corresponding Source need not include anything that users can
regenerate automatically from other parts of the Corresponding Source.

The Corresponding Source for a work in source code form is that same
work.

#### 2. Basic Permissions.

All rights granted under this License are granted for the term of
copyright on the Program, and are irrevocable provided the stated
conditions are met. This License explicitly affirms your unlimited
permission to run the unmodified Program. The output from running a
covered work is covered by this License only if the output, given its
content, constitutes a covered work. This License acknowledges your
rights of fair use or other equivalent, as provided by copyright law.

You may make, run and propagate covered works that you do not convey,
without conditions so long as your license otherwise remains in force.
You may convey covered works to others for the sole purpose of having
them make modifications exclusively for you, or provide you with
facilities for running those works, provided that you comply with the
terms of this License in conveying all material for which you do not
control copyright. Those thus making or running the covered works for
you must do so exclusively on your behalf, under your direction and
control, on terms that prohibit them from making any copies of your
copyrighted material outside their relationship with you.

Conveying under any other circumstances is permitted solely under the
conditions stated below. Sublicensing is not allowed; section 10 makes
it unnecessary.

#### 3. Protecting Users' Legal Rights From Anti-Circumvention Law.

No covered work shall be deemed part of an effective technological
measure under any applicable law fulfilling obligations under article
11 of the WIPO copyright treaty adopted on 20 December 1996, or
similar laws prohibiting or restricting circumvention of such
measures.

When you convey a covered work, you waive any legal power to forbid
circumvention of technological measures to the extent such
circumvention is effected by exercising rights under this License with
respect to the covered work, and you disclaim any intention to limit
operation or modification of the work as a means of enforcing, against
the work's users, your or third parties' legal rights to forbid
circumvention of technological measures.

#### 4. Conveying Verbatim Copies.

You may convey verbatim copies of the Program's source code as you
receive it, in any medium, provided that you conspicuously and
appropriately publish on each copy an appropriate copyright notice;
keep intact all notices stating that this License and any
non-permissive terms added in accord with section 7 apply to the code;
keep intact all notices of the absence of any warranty; and give all
recipients a copy of this License along with the Program.

You may charge any price or no price for each copy that you convey,
and you may offer support or warranty protection for a fee.

#### 5. Conveying Modified Source Versions.

You may convey a work based on the Program, or the modifications to
produce it from the Program, in the form of source code under the
terms of section 4, provided that you also meet all of these
conditions:

-   a) The work must carry prominent notices stating that you modified
    it, and giving a relevant date.
-   b) The work must carry prominent notices stating that it is
    released under this License and any conditions added under
    section 7. This requirement modifies the requirement in section 4
    to "keep intact all notices".
-   c) You must license the entire work, as a whole, under this
    License to anyone who comes into possession of a copy. This
    License will therefore apply, along with any applicable section 7
    additional terms, to the whole of the work, and all its parts,
    regardless of how they are packaged. This License gives no
    permission to license the work in any other way, but it does not
    invalidate such permission if you have separately received it.
-   d) If the work has interactive user interfaces, each must display
    Appropriate Legal Notices; however, if the Program has interactive
    interfaces that do not display Appropriate Legal Notices, your
    work need not make them do so.

A compilation of a covered work with other separate and independent
works, which are not by their nature extensions of the covered work,
and which are not combined with it such as to form a larger program,
in or on a volume of a storage or distribution medium, is called an
"aggregate" if the compilation and its resulting copyright are not
used to limit the access or legal rights of the compilation's users
beyond what the individual works permit. Inclusion of a covered work
in an aggregate does not cause this License to apply to the other
parts of the aggregate.

#### 6. Conveying Non-Source Forms.

You may convey a covered work in object code form under the terms of
sections 4 and 5, provided that you also convey the machine-readable
Corresponding Source under the terms of this License, in one of these
ways:

-   a) Convey the object code in, or embodied in, a physical product
    (including a physical distribution medium), accompanied by the
    Corresponding Source fixed on a durable physical medium
    customarily used for software interchange.
-   b) Convey the object code in, or embodied in, a physical product
    (including a physical distribution medium), accompanied by a
    written offer, valid for at least three years and valid for as
    long as you offer spare parts or customer support for that product
    model, to give anyone who possesses the object code either (1) a
    copy of the Corresponding Source for all the software in the
    product that is covered by this License, on a durable physical
    medium customarily used for software interchange, for a price no
    more than your reasonable cost of physically performing this
    conveying of source, or (2) access to copy the Corresponding
    Source from a network server at no charge.
-   c) Convey individual copies of the object code with a copy of the
    written offer to provide the Corresponding Source. This
    alternative is allowed only occasionally and noncommercially, and
    only if you received the object code with such an offer, in accord
    with subsection 6b.
-   d) Convey the object code by offering access from a designated
    place (gratis or for a charge), and offer equivalent access to the
    Corresponding Source in the same way through the same place at no
    further charge. You need not require recipients to copy the
    Corresponding Source along with the object code. If the place to
    copy the object code is a network server, the Corresponding Source
    may be on a different server (operated by you or a third party)
    that supports equivalent copying facilities, provided you maintain
    clear directions next to the object code saying where to find the
    Corresponding Source. Regardless of what server hosts the
    Corresponding Source, you remain obligated to ensure that it is
    available for as long as needed to satisfy these requirements.
-   e) Convey the object code using peer-to-peer transmission,
    provided you inform other peers where the object code and
    Corresponding Source of the work are being offered to the general
    public at no charge under subsection 6d.

A separable portion of the object code, whose source code is excluded
from the Corresponding Source as a System Library, need not be
included in conveying the object code work.

A "User Product" is either (1) a "consumer product", which means any
tangible personal property which is normally used for personal,
family, or household purposes, or (2) anything designed or sold for
incorporation into a dwelling. In determining whether a product is a
consumer product, doubtful cases shall be resolved in favor of
coverage. For a particular product received by a particular user,
"normally used" refers to a typical or common use of that class of
product, regardless of the status of the particular user or of the way
in which the particular user actually uses, or expects or is expected
to use, the product. A product is a consumer product regardless of
whether the product has substantial commercial, industrial or
non-consumer uses, unless such uses represent the only significant
mode of use of the product.

"Installation Information" for a User Product means any methods,
procedures, authorization keys, or other information required to
install and execute modified versions of a covered work in that User
Product from a modified version of its Corresponding Source. The
information must suffice to ensure that the continued functioning of
the modified object code is in no case prevented or interfered with
solely because modification has been made.

If you convey an object code work under this section in, or with, or
specifically for use in, a User Product, and the conveying occurs as
part of a transaction in which the right of possession and use of the
User Product is transferred to the recipient in perpetuity or for a
fixed term (regardless of how the transaction is characterized), the
Corresponding Source conveyed under this section must be accompanied
by the Installation Information. But this requirement does not apply
if neither you nor any third party retains the ability to install
modified object code on the User Product (for example, the work has
been installed in ROM).

The requirement to provide Installation Information does not include a
requirement to continue to provide support service, warranty, or
updates for a work that has been modified or installed by the
recipient, or for the User Product in which it has been modified or
installed. Access to a network may be denied when the modification
itself materially and adversely affects the operation of the network
or violates the rules and protocols for communication across the
network.

Corresponding Source conveyed, and Installation Information provided,
in accord with this section must be in a format that is publicly
documented (and with an implementation available to the public in
source code form), and must require no special password or key for
unpacking, reading or copying.

#### 7. Additional Terms.

"Additional permissions" are terms that supplement the terms of this
License by making exceptions from one or more of its conditions.
Additional permissions that are applicable to the entire Program shall
be treated as though they were included in this License, to the extent
that they are valid under applicable law. If additional permissions
apply only to part of the Program, that part may be used separately
under those permissions, but the entire Program remains governed by
this License without regard to the additional permissions.

When you convey a copy of a covered work, you may at your option
remove any additional permissions from that copy, or from any part of
it. (Additional permissions may be written to require their own
removal in certain cases when you modify the work.) You may place
additional permissions on material, added by you to a covered work,
for which you have or can give appropriate copyright permission.

Notwithstanding any other provision of this License, for material you
add to a covered work, you may (if authorized by the copyright holders
of that material) supplement the terms of this License with terms:

-   a) Disclaiming warranty or limiting liability differently from the
    terms of sections 15 and 16 of this License; or
-   b) Requiring preservation of specified reasonable legal notices or
    author attributions in that material or in the Appropriate Legal
    Notices displayed by works containing it; or
-   c) Prohibiting misrepresentation of the origin of that material,
    or requiring that modified versions of such material be marked in
    reasonable ways as different from the original version; or
-   d) Limiting the use for publicity purposes of names of licensors
    or authors of the material; or
-   e) Declining to grant rights under trademark law for use of some
    trade names, trademarks, or service marks; or
-   f) Requiring indemnification of licensors and authors of that
    material by anyone who conveys the material (or modified versions
    of it) with contractual assumptions of liability to the recipient,
    for any liability that these contractual assumptions directly
    impose on those licensors and authors.

All other non-permissive additional terms are considered "further
restrictions" within the meaning of section 10. If the Program as you
received it, or any part of it, contains a notice stating that it is
governed by this License along with a term that is a further
restriction, you may remove that term. If a license document contains
a further restriction but permits relicensing or conveying under this
License, you may add to a covered work material governed by the terms
of that license document, provided that the further restriction does
not survive such relicensing or conveying.

If you add terms to a covered work in accord with this section, you
must place, in the relevant source files, a statement of the
additional terms that apply to those files, or a notice indicating
where to find the applicable terms.

Additional terms, permissive or non-permissive, may be stated in the
form of a separately written license, or stated as exceptions; the
above requirements apply either way.

#### 8. Termination.

You may not propagate or modify a covered work except as expressly
provided under this License. Any attempt otherwise to propagate or
modify it is void, and will automatically terminate your rights under
this License (including any patent licenses granted under the third
paragraph of section 11).

However, if you cease all violation of this License, then your license
from a particular copyright holder is reinstated (a) provisionally,
unless and until the copyright holder explicitly and finally
terminates your license, and (b) permanently, if the copyright holder
fails to notify you of the violation by some reasonable means prior to
60 days after the cessation.

Moreover, your license from a particular copyright holder is
reinstated permanently if the copyright holder notifies you of the
violation by some reasonable means, this is the first time you have
received notice of violation of this License (for any work) from that
copyright holder, and you cure the violation prior to 30 days after
your receipt of the notice.

Termination of your rights under this section does not terminate the
licenses of parties who have received copies or rights from you under
this License. If your rights have been terminated and not permanently
reinstated, you do not qualify to receive new licenses for the same
material under section 10.

#### 9. Acceptance Not Required for Having Copies.

You are not required to accept this License in order to receive or run
a copy of the Program. Ancillary propagation of a covered work
occurring solely as a consequence of using peer-to-peer transmission
to receive a copy likewise does not require acceptance. However,
nothing other than this License grants you permission to propagate or
modify any covered work. These actions infringe copyright if you do
not accept this License. Therefore, by modifying or propagating a
covered work, you indicate your acceptance of this License to do so.

#### 10. Automatic Licensing of Downstream Recipients.

Each time you convey a covered work, the recipient automatically
receives a license from the original licensors, to run, modify and
propagate that work, subject to this License. You are not responsible
for enforcing compliance by third parties with this License.

An "entity transaction" is a transaction transferring control of an
organization, or substantially all assets of one, or subdividing an
organization, or merging organizations. If propagation of a covered
work results from an entity transaction, each party to that
transaction who receives a copy of the work also receives whatever
licenses to the work the party's predecessor in interest had or could
give under the previous paragraph, plus a right to possession of the
Corresponding Source of the work from the predecessor in interest, if
the predecessor has it or can get it with reasonable efforts.

You may not impose any further restrictions on the exercise of the
rights granted or affirmed under this License. For example, you may
not impose a license fee, royalty, or other charge for exercise of
rights granted under this License, and you may not initiate litigation
(including a cross-claim or counterclaim in a lawsuit) alleging that
any patent claim is infringed by making, using, selling, offering for
sale, or importing the Program or any portion of it.

#### 11. Patents.

A "contributor" is a copyright holder who authorizes use under this
License of the Program or a work on which the Program is based. The
work thus licensed is called the contributor's "contributor version".

A contributor's "essential patent claims" are all patent claims owned
or controlled by the contributor, whether already acquired or
hereafter acquired, that would be infringed by some manner, permitted
by this License, of making, using, or selling its contributor version,
but do not include claims that would be infringed only as a
consequence of further modification of the contributor version. For
purposes of this definition, "control" includes the right to grant
patent sublicenses in a manner consistent with the requirements of
this License.

Each contributor grants you a non-exclusive, worldwide, royalty-free
patent license under the contributor's essential patent claims, to
make, use, sell, offer for sale, import and otherwise run, modify and
propagate the contents of its contributor version.

In the following three paragraphs, a "patent license" is any express
agreement or commitment, however denominated, not to enforce a patent
(such as an express permission to practice a patent or covenant not to
sue for patent infringement). To "grant" such a patent license to a
party means to make such an agreement or commitment not to enforce a
patent against the party.

If you convey a covered work, knowingly relying on a patent license,
and the Corresponding Source of the work is not available for anyone
to copy, free of charge and under the terms of this License, through a
publicly available network server or other readily accessible means,
then you must either (1) cause the Corresponding Source to be so
available, or (2) arrange to deprive yourself of the benefit of the
patent license for this particular work, or (3) arrange, in a manner
consistent with the requirements of this License, to extend the patent
license to downstream recipients. "Knowingly relying" means you have
actual knowledge that, but for the patent license, your conveying the
covered work in a country, or your recipient's use of the covered work
in a country, would infringe one or more identifiable patents in that
country that you have reason to believe are valid.

If, pursuant to or in connection with a single transaction or
arrangement, you convey, or propagate by procuring conveyance of, a
covered work, and grant a patent license to some of the parties
receiving the covered work authorizing them to use, propagate, modify
or convey a specific copy of the covered work, then the patent license
you grant is automatically extended to all recipients of the covered
work and works based on it.

A patent license is "discriminatory" if it does not include within the
scope of its coverage, prohibits the exercise of, or is conditioned on
the non-exercise of one or more of the rights that are specifically
granted under this License. You may not convey a covered work if you
are a party to an arrangement with a third party that is in the
business of distributing software, under which you make payment to the
third party based on the extent of your activity of conveying the
work, and under which the third party grants, to any of the parties
who would receive the covered work from you, a discriminatory patent
license (a) in connection with copies of the covered work conveyed by
you (or copies made from those copies), or (b) primarily for and in
connection with specific products or compilations that contain the
covered work, unless you entered into that arrangement, or that patent
license was granted, prior to 28 March 2007.

Nothing in this License shall be construed as excluding or limiting
any implied license or other defenses to infringement that may
otherwise be available to you under applicable patent law.

#### 12. No Surrender of Others' Freedom.

If conditions are imposed on you (whether by court order, agreement or
otherwise) that contradict the conditions of this License, they do not
excuse you from the conditions of this License. If you cannot convey a
covered work so as to satisfy simultaneously your obligations under
this License and any other pertinent obligations, then as a
consequence you may not convey it at all. For example, if you agree to
terms that obligate you to collect a royalty for further conveying
from those to whom you convey the Program, the only way you could
satisfy both those terms and this License would be to refrain entirely
from conveying the Program.

#### 13. Use with the GNU Affero General Public License.

Notwithstanding any other provision of this License, you have
permission to link or combine any covered work with a work licensed
under version 3 of the GNU Affero General Public License into a single
combined work, and to convey the resulting work. The terms of this
License will continue to apply to the part which is the covered work,
but the special requirements of the GNU Affero General Public License,
section 13, concerning interaction through a network will apply to the
combination as such.

#### 14. Revised Versions of this License.

The Free Software Foundation may publish revised and/or new versions
of the GNU General Public License from time to time. Such new versions
will be similar in spirit to the present version, but may differ in
detail to address new problems or concerns.

Each version is given a distinguishing version number. If the Program
specifies that a certain numbered version of the GNU General Public
License "or any later version" applies to it, you have the option of
following the terms and conditions either of that numbered version or
of any later version published by the Free Software Foundation. If the
Program does not specify a version number of the GNU General Public
License, you may choose any version ever published by the Free
Software Foundation.

If the Program specifies that a proxy can decide which future versions
of the GNU General Public License can be used, that proxy's public
statement of acceptance of a version permanently authorizes you to
choose that version for the Program.

Later license versions may give you additional or different
permissions. However, no additional obligations are imposed on any
author or copyright holder as a result of your choosing to follow a
later version.

#### 15. Disclaimer of Warranty.

THERE IS NO WARRANTY FOR THE PROGRAM, TO THE EXTENT PERMITTED BY
APPLICABLE LAW. EXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT
HOLDERS AND/OR OTHER PARTIES PROVIDE THE PROGRAM "AS IS" WITHOUT
WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT NOT
LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
A PARTICULAR PURPOSE. THE ENTIRE RISK AS TO THE QUALITY AND
PERFORMANCE OF THE PROGRAM IS WITH YOU. SHOULD THE PROGRAM PROVE
DEFECTIVE, YOU ASSUME THE COST OF ALL NECESSARY SERVICING, REPAIR OR
CORRECTION.

#### 16. Limitation of Liability.

IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING
WILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MODIFIES AND/OR
CONVEYS THE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES,
INCLUDING ANY GENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES
ARISING OUT OF THE USE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT
NOT LIMITED TO LOSS OF DATA OR DATA BEING RENDERED INACCURATE OR
LOSSES SUSTAINED BY YOU OR THIRD PARTIES OR A FAILURE OF THE PROGRAM
TO OPERATE WITH ANY OTHER PROGRAMS), EVEN IF SUCH HOLDER OR OTHER
PARTY HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGES.

#### 17. Interpretation of Sections 15 and 16.

If the disclaimer of warranty and limitation of liability provided
above cannot be given local legal effect according to their terms,
reviewing courts shall apply local law that most closely approximates
an absolute waiver of all civil liability in connection with the
Program, unless a warranty or assumption of liability accompanies a
copy of the Program in return for a fee.

END OF TERMS AND CONDITIONS

### How to Apply These Terms to Your New Programs

If you develop a new program, and you want it to be of the greatest
possible use to the public, the best way to achieve this is to make it
free software which everyone can redistribute and change under these
terms.

To do so, attach the following notices to the program. It is safest to
attach them to the start of each source file to most effectively state
the exclusion of warranty; and each file should have at least the
"copyright" line and a pointer to where the full notice is found.

        <one line to give the program's name and a brief idea of what it does.>
        Copyright (C) <year>  <name of author>

        This program is free software: you can redistribute it and/or modify
        it under the terms of the GNU General Public License as published by
        the Free Software Foundation, either version 3 of the License, or
        (at your option) any later version.

        This program is distributed in the hope that it will be useful,
        but WITHOUT ANY WARRANTY; without even the implied warranty of
        MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
        GNU General Public License for more details.

        You should have received a copy of the GNU General Public License
        along with this program.  If not, see <http://www.gnu.org/licenses/>.

Also add information on how to contact you by electronic and paper
mail.

If the program does terminal interaction, make it output a short
notice like this when it starts in an interactive mode:

        <program>  Copyright (C) <year>  <name of author>
        This program comes with ABSOLUTELY NO WARRANTY; for details type `show w'.
        This is free software, and you are welcome to redistribute it
        under certain conditions; type `show c' for details.

The hypothetical commands \`show w' and \`show c' should show the
appropriate parts of the General Public License. Of course, your
program's commands might be different; for a GUI interface, you would
use an "about box".

You should also get your employer (if you work as a programmer) or
school, if any, to sign a "copyright disclaimer" for the program, if
necessary. For more information on this, and how to apply and follow
the GNU GPL, see <http://www.gnu.org/licenses/>.

The GNU General Public License does not permit incorporating your
program into proprietary programs. If your program is a subroutine
library, you may consider it more useful to permit linking proprietary
applications with the library. If this is what you want to do, use the
GNU Lesser General Public License instead of this License. But first,
please read <http://www.gnu.org/philosophy/why-not-lgpl.html>.
